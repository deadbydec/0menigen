#routes.wardrobe.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession

from database import get_db
from auth.cookie_auth import get_current_user_from_cookie
from utils.wardrobe_tools import (
    move_to_wardrobe,
    move_from_wardrobe,
    serialize_wardrobe,
)

router = APIRouter(prefix="/api/wardrobe", tags=["wardrobe"])

@router.get("/", summary="–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–±")
async def get_wardrobe(
    user = Depends(get_current_user_from_cookie),
    db:   AsyncSession = Depends(get_db),
):
    if not user:
        raise HTTPException(401, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return await serialize_wardrobe(db, user.id)

@router.post("/add", summary="–£–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –≥–∞—Ä–¥–µ—Ä–æ–±")
async def add_to_wardrobe(
    payload: dict,
    user      = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db),
):

    if not user:
        raise HTTPException(401, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    # –±–µ—Ä—ë–º –ª–∏–±–æ item_id, –ª–∏–±–æ inventory_id ‚Äî —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ –ø—Ä–∏—Å–ª–∞—Ç—å –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö
    item_id = payload.get("item_id") or payload.get("inventory_id")
    if item_id is None:
        raise HTTPException(400, "`item_id` –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    # üëâ —Å–∞–º –ø–µ—Ä–µ–Ω–æ—Å (+ commit) –¥–µ–ª–∞–µ—Ç —É—Ç–∏–ª–∏—Ç–∞
    await move_to_wardrobe(db, user, int(item_id))

    # –æ—Ç–¥–∞—ë–º —Å–≤–µ–∂–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
    return await serialize_wardrobe(db, user.id)

@router.post("/remove", summary="–í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞")
async def remove_from_wardrobe(
    payload: dict,
    user = Depends(get_current_user_from_cookie),
    db:   AsyncSession = Depends(get_db),
):
    wardrobe_id = payload.get("wardrobe_id")
    if not wardrobe_id:
        raise HTTPException(400, "`wardrobe_id` –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    await move_from_wardrobe(db, user, wardrobe_id)

    return await serialize_wardrobe(db, user.id)


#utils.wardrobe_tools.py
from __future__ import annotations
import json
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from fastapi import HTTPException
from models.models import PetRenderConfig, Pet  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç
from constants.wardrobe import AVATAR_SLOTS

async def build_avatar_layers(
    pet_id: int,
    db: AsyncSession,
    avatar_mode: bool = False,
    race_code: str = ""
) -> list[dict]:

    config: PetRenderConfig | None = await db.get(PetRenderConfig, pet_id)
    pet: Pet | None = await db.get(Pet, pet_id)

    if not config or not isinstance(config.slot_order, list) or not pet:
        return []

    inventory_ids = [
        layer["rid"]
        for layer in config.slot_order
        if isinstance(layer, dict) and "rid" in layer and layer["rid"] not in (None, -1)
    ]

    result = await db.execute(
        select(UserPetWardrobeItem)
        .options(joinedload(UserPetWardrobeItem.product))
        .where(UserPetWardrobeItem.id.in_(inventory_ids))
    )
    wardrobe_map = {item.id: item for item in result.scalars().all()}

    layers = []

    # üêæ –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π –ø–∏—Ç–æ–º—Ü–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ z=3
    if pet.image:
        layers.append({
            "src": f"https://localhost:5002/static/{pet.image}",
            "z": 3,
            "slot": "base"
        })

    for layer in config.slot_order:
        rid = layer.get("rid")
        slot = layer.get("slot")

        if rid in (None, -1) or not slot:
            continue

        if avatar_mode and slot not in AVATAR_SLOTS:
            continue

        wrd = wardrobe_map.get(rid)
        if not wrd or not wrd.product:
            continue

        prod = wrd.product
        custom = prod.custom

        if isinstance(custom, str):
            try:
                custom = json.loads(custom)
            except json.JSONDecodeError:
                custom = {}

        src = None
        render_variants = custom.get("render_variants", {})
        variant = render_variants.get(race_code)

        if isinstance(variant, str):
            src = f"https://localhost:5002/static/cosmetic/{variant}"
        elif f"{slot}_image" in custom:
            src = f"https://localhost:5002/static/{custom[f'{slot}_image']}"
        elif "image" in custom:
            src = f"https://localhost:5002/static/cosmetic/{custom['image']}"
        elif prod.image:
            src = f"https://localhost:5002/static/goods/{prod.image}"

        if src:
            layers.append({
                "src": src,
                "z": custom.get("z", 100),
                "slot": slot
            })

    return sorted(layers, key=lambda l: l["z"])

from utils.slot_utils import get_enum_slot
from models.models import (
    InventoryItem,
    Product,
    ProductType,
    UserPetWardrobeItem,
    WardrobeSlot,
)
async def detect_slot(product: Product) -> WardrobeSlot:
    SLOT_MAP = {
        "background": "—Ñ–æ–Ω", "aura": "–æ–∫—Ä—É–∂–µ–Ω–∏–µ", "companion": "—Å–ø—É—Ç–Ω–∏–∫",
        "body": "—Ç–µ–ª–æ", "paws": "–ª–∞–ø—ã", "wings": "–∫—Ä—ã–ª—å—è",
        "eyes": "–≥–ª–∞–∑–∞", "head": "–≥–æ–ª–æ–≤–∞", "tail": "—Ö–≤–æ—Å—Ç",
        "accessory": "–∞–∫—Å–µ—Å—Å—É–∞—Ä", "face": "–º–æ—Ä–¥–∞", "skin": "–ø–æ–∫—Ä–æ–≤", "foreground":"–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω", "dye":"—ç—Å—Å–µ–Ω—Ü–∏—è"
    }

    try:
        custom = json.loads(product.custom) if isinstance(product.custom, str) else (product.custom or {})
    except json.JSONDecodeError:
        custom = {}

    raw = custom.get("slot")
    ru_slot = SLOT_MAP.get(raw, raw)
    try:
        return WardrobeSlot(ru_slot) if ru_slot else WardrobeSlot.accessory
    except ValueError:
        return WardrobeSlot.accessory

async def move_to_wardrobe(           # ‚Üê —Ç–æ–ª—å–∫–æ –û–î–ò–ù —ç–∫–∑–µ–º–ø–ª—è—Ä
    db:   AsyncSession,
    user,                             # current user (–º–æ–¥–µ–ª—å User)
    item_id: int                      # InventoryItem.id
) -> None:

    # 1 ‚ñ∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    item: InventoryItem | None = (
        await db.execute(
            select(InventoryItem)
            .options(joinedload(InventoryItem.product))
            .where(InventoryItem.id == item_id)
        )
    ).scalar_one_or_none()

    if not item or item.user_id != user.id:
        raise HTTPException(403, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à")

    product = item.product
    if not product:
        raise HTTPException(500, "–£ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ Product")

    # 2 ‚ñ∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Å–º–µ—Ç–∏–∫–∞
    is_cosmetic = (
        product.product_type == ProductType.cosmetic or
        str(product.product_type) == "cosmetic"       # —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
    )
    if not is_cosmetic:
        raise HTTPException(400, "–≠—Ç–æ –Ω–µ –∫–æ—Å–º–µ—Ç–∏–∫–∞")

    slot: WardrobeSlot = await detect_slot(product)

    # 3 ‚ñ∏ —Å–æ–∑–¥–∞—ë–º –ù–û–í–£–Æ –∑–∞–ø–∏—Å—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ
    wardrobe_entry = UserPetWardrobeItem(
        user_id    = user.id,
        product_id = product.id,
        slot       = slot,
        quantity   = 1            # –≤—Å–µ–≥–¥–∞ 1 ‚Äî –∫–∞–∂–¥–∞—è –∫–æ–ø–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
    )
    db.add(wardrobe_entry)

    # 4 ‚ñ∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ñ–ª–µ—à–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π wardrobe_id
    await db.flush()              # ‚Üê –∫—Ä–∏—Ç–∏—á–Ω–æ, –∏–Ω–∞—á–µ SQLAlchemy
                                  #    –º–æ–∂–µ—Ç –∞–≥–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏

    # 5 ‚ñ∏ –≤—ã—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if item.quantity > 1:
        item.quantity -= 1
    else:
        await db.delete(item)

    # 6 ‚ñ∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.commit()

    print(
        f"[WARDROBE] +1 ¬´{product.name}¬ª "
        f"(slot={slot.value}, wardrobe_id={wardrobe_entry.id})"
    )

async def move_from_wardrobe(
    db: AsyncSession,
    user,
    wardrobe_id: int
) -> None:

    entry: UserPetWardrobeItem | None = (
        await db.execute(
            select(UserPetWardrobeItem)
            .options(joinedload(UserPetWardrobeItem.product))
            .where(UserPetWardrobeItem.id == wardrobe_id, UserPetWardrobeItem.user_id == user.id)
        )
    ).scalar_one_or_none()

    if not entry:
        raise HTTPException(404, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ")

    product = entry.product
    if not product:
        raise HTTPException(500, "–£ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç Product")

    # üì• –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    existing: InventoryItem | None = (
        await db.execute(
            select(InventoryItem)
            .where(InventoryItem.user_id == user.id, InventoryItem.product_id == product.id)
        )
    ).scalar_one_or_none()

    if existing:
        existing.quantity += 1
    else:
        db.add(InventoryItem(user_id=user.id, product_id=product.id, quantity=1))

    await db.delete(entry)
    await db.commit()

    print(f"[WARDROBE] -1 ¬´{product.name}¬ª (wardrobe_id={wardrobe_id}) ‚Üí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")

async def serialize_wardrobe(
    db: AsyncSession,
    user_id: int
) -> list[dict]:

    rows = (
        await db.execute(
            select(UserPetWardrobeItem)
            .options(joinedload(UserPetWardrobeItem.product))
            .where(UserPetWardrobeItem.user_id == user_id)
            .order_by(UserPetWardrobeItem.id.asc())
        )
    ).scalars().all()

    RU_TO_EN = {
        "—Ñ–æ–Ω": "background", "–æ–∫—Ä—É–∂–µ–Ω–∏–µ": "aura",   "—Å–ø—É—Ç–Ω–∏–∫": "companion",
        "—Ç–µ–ª–æ": "body",      "–ª–∞–ø—ã": "paws",        "–∫—Ä—ã–ª—å—è": "wings",
        "–≥–ª–∞–∑–∞": "eyes",     "–≥–æ–ª–æ–≤–∞": "head",      "—Ö–≤–æ—Å—Ç": "tail",
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä": "accessory", "–º–æ—Ä–¥–∞": "face",  "–ø–æ–∫—Ä–æ–≤": "skin",
        "–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω":"foreground", "—ç—Å—Å–µ–Ω—Ü–∏—è":"dye"
    }

    out: list[dict] = []

    for wrd in rows:
        prod = wrd.product

        # safe-parse custom
        custom = prod.custom
        if isinstance(custom, str):
            try:
                custom = json.loads(custom)
            except json.JSONDecodeError:
                custom = {}

        item: dict = {
            "wardrobe_id": wrd.id,          # üëà —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∫–æ–ø–∏–∏
            "product_id":  prod.id,
            "slot":        wrd.slot.value,
            "quantity":    wrd.quantity,    # –≤—Å–µ–≥–¥–∞ 1, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
            "name":        prod.name,
            "image":       prod.image,
            "rarity":      prod.rarity.value,
            "custom":      custom or {},
        }

        # –µ—Å–ª–∏ custom –∏–º–µ–µ—Ç slot-specific –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∫–ª–∞–¥—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        en_slot = RU_TO_EN.get(wrd.slot.value)
        if en_slot:
            key = f"{en_slot}_image"
            if isinstance(custom, dict) and key in custom:
                item[key] = custom[key]

        out.append(item)

    return out
