#auth.cookie_auth.py
from fastapi import Request, HTTPException, Depends
from jose import jwt, JWTError
from sqlalchemy import select
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from starlette.middleware.base import BaseHTTPMiddleware, ASGIApp
from database import get_db, async_session
from models import User
from config import settings
from utils.last_seen import set_user_online
from typing import Optional

EXCLUDED_PATHS = ["/auth/login", "/auth/register", "/auth/check-auth"]
SECRET_KEY = settings.JWT_SECRET_KEY
ALGORITHM = "HS256"

def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        raise HTTPException(status_code=401, detail="‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")

def get_token_from_cookie(request: Request) -> str:
    token = request.cookies.get("access_token_cookie")
    if not token:
        raise HTTPException(status_code=401, detail="‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω access_token_cookie")
    return token

async def get_current_user_from_cookie(request: Request) -> Optional[User]:
    if request.method == "OPTIONS":
        print("üõ∞Ô∏è [CORS] OPTIONS-–∑–∞–ø—Ä–æ—Å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        return None

    token = get_token_from_cookie(request)
    if not token:
        print("‚ö†Ô∏è [COOKIE] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    try:
        payload = decode_access_token(token)
        user_id = int(payload.get("sub"))
        if not user_id:
            print("‚ùå [COOKIE] –í —Ç–æ–∫–µ–Ω–µ –Ω–µ—Ç user_id")
            return None

        async with async_session() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            if user:
                return user
            print("‚ùå [COOKIE] –Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
    except JWTError as e:
        print(f"‚ùå [COOKIE] JWTError: {e}")
    except Exception as e:
        print(f"üí• [COOKIE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —é–∑–µ—Ä–∞: {e}")

    return None

class AsyncCookieAuthMiddleware(BaseHTTPMiddleware):
    def __init__(self, app: ASGIApp):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        # ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º preflight-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç CORS
        if request.method == "OPTIONS":
            return await call_next(request)

        request_path = request.url.path
        if any(request_path.startswith(p) for p in EXCLUDED_PATHS):
            return await call_next(request)
        
        request.state.user = None
        token = request.cookies.get("access_token_cookie")

        if token:
            try:
                payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
                user_id = int(payload.get("sub"))
                async with async_session() as session:
                    user = await session.get(User, user_id)
                    if user:
                        request.state.user = user
                        await set_user_online(user.id)
            except JWTError as e:
                print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")

        response = await call_next(request)
        return response

class DebugCookieAuthMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        
        if request.method == "OPTIONS":
            return await call_next(request)
        # –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–ª–æ–≤–∏—Ç—å –∫—É–∫—É –¥–æ –∑–∞–ø—Ä–æ—Å–∞:
        token = request.cookies.get("access_token_cookie")

        if token:
            try:
                # –ü—Ä–æ—Å—Ç–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–µ—á–∞—Ç–∞–µ–º (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
                from config import settings
                SECRET_KEY = settings.JWT_SECRET_KEY
                ALGORITHM = "HS256"
                from jose import jwt
                payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
                print(f"üîê [COOKIE OK] Payload: {payload}")
            except JWTError as e:
                print(f"üö´ [COOKIE FAIL] JWTError: {str(e)}")
                return JSONResponse(
                    status_code=401,
                    content={"detail": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (JWTError)"},
                )
            except Exception as e:
                print(f"üí• [COOKIE CRASH] Exception: {str(e)}")
                return JSONResponse(
                    status_code=401,
                    content={"detail": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞"},
                )
        else:
            print("‚ö†Ô∏è [COOKIE MISS] access_token_cookie –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return await call_next(request)

#config.py
import os
import redis
from dotenv import load_dotenv
from pydantic_settings import BaseSettings
from datetime import timedelta
from fastapi_mail import ConnectionConfig

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Settings(BaseSettings):
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å asyncpg —Å SQLAlchemy, –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å "postgresql+asyncpg://..."
    SQLALCHEMY_DATABASE_URI: str = os.getenv("SQLALCHEMY_DATABASE_URI", "postgresql+asyncpg://postgres:898939@localhost:5432/new_db")
    REDIS_URL: str = os.getenv("REDIS_URL", "redis://localhost:6379/0")
    SECRET_KEY: str = os.getenv("JWT_SECRET_KEY", "defaultsecretkey")
    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")
    # JWT –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    JWT_SECRET_KEY: str = os.getenv("JWT_SECRET_KEY", "your-jwt-secret-key")  
    JWT_ACCESS_TOKEN_EXPIRES: timedelta = timedelta(days=int(os.getenv("JWT_ACCESS_TOKEN_EXPIRES", 7)))
    JWT_REFRESH_TOKEN_EXPIRES: timedelta = timedelta(days=int(os.getenv("JWT_REFRESH_TOKEN_EXPIRES", 30)))
     # üî• –î–û–ë–ê–í–¨ –≠–¢–ò:
    MAIL_USERNAME: str
    MAIL_PASSWORD: str
    MAIL_FROM: str
    MAIL_SERVER: str
    MAIL_PORT: int
    MAIL_STARTTLS: bool = True
    MAIL_SSL_TLS: bool = False

    class Config:
        env_file = ".env"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
settings = Settings()

MAIL_CONF = ConnectionConfig(
    MAIL_USERNAME=settings.MAIL_USERNAME,
    MAIL_PASSWORD=settings.MAIL_PASSWORD,
    MAIL_FROM=settings.MAIL_FROM,
    MAIL_PORT=settings.MAIL_PORT,
    MAIL_SERVER=settings.MAIL_SERVER,
    MAIL_STARTTLS=settings.MAIL_STARTTLS,
    MAIL_SSL_TLS=settings.MAIL_SSL_TLS,
    USE_CREDENTIALS=True,
    VALIDATE_CERTS=True,
    TIMEOUT=30  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
)

# üîπ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—É—Ç–∏ –∏ —Ñ–∞–π–ª—ã)
class Config:
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
    DATABASE_URL = settings.SQLALCHEMY_DATABASE_URI
    # –ü—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'uploads')
    PRODUCT_UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'goods')
    PET_UPLOAD_FOLDER     = os.path.join(BASE_DIR, 'static', 'pets')
    COSMETIC_UPLOAD_FOLDER     = os.path.join(BASE_DIR, 'static', 'cosmetic')
    FORUM_THREADS_PATH = os.path.join(BASE_DIR, "data", "forum_threads.json")
    NEWS_FILE = os.path.join(BASE_DIR, "data", "news.json")
    PRODUCTS_FILE = os.path.join(BASE_DIR, "data", "products.json")
    ACHIEVEMENTS_FILE = os.path.join(BASE_DIR, "data", "achievements.json")  # ‚úÖ –ü—É—Ç—å –∫ –∞—á–∏–≤–∫–∞–º

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for folder in [UPLOAD_FOLDER, PRODUCT_UPLOAD_FOLDER]:
        os.makedirs(folder, exist_ok=True)

    os.makedirs(os.path.dirname(NEWS_FILE), exist_ok=True)

    if not os.path.exists(NEWS_FILE):
        with open(NEWS_FILE, "w", encoding="utf-8") as f:
            f.write("[]")

    print(f"üìå NEWS_FILE –∑–∞–≥—Ä—É–∂–µ–Ω: {NEWS_FILE}")

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Redis
try:
    REDIS_CONN = redis.StrictRedis.from_url(settings.REDIS_URL, decode_responses=False)
except redis.ConnectionError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    REDIS_CONN = None

#routes.auth.py
from datetime import timedelta, datetime
from fastapi import APIRouter, Depends, HTTPException, Request, Response, Query
from typing import AsyncGenerator
from jose import jwt, JWTError
from sqlalchemy import func
from pydantic import BaseModel, Field
from fastapi.responses import JSONResponse, RedirectResponse
from fastapi_jwt import JwtAccessBearer, JwtAuthorizationCredentials
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from models.models import async_session as _async_session, User, InventoryItem, Product, async_session
import json
from config import Settings, settings
from database import get_db
from utils.confirm_email import send_confirmation_email

jwt_access = JwtAccessBearer(secret_key="supersecretkey", auto_error=True)

router = APIRouter()

async def validation_exception_handler(request, exc):
    print("üìå [DEBUG] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", exc.errors())  # –õ–û–ì–ò–†–£–ï–ú!
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()},
    )

async def some_dependency(local_kw: str = Query("ru")):
    return local_kw

# üî• Pydantic-–º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class UserRegister(BaseModel):
    username: str
    email: str
    password: str
    confirm_password: str = Field(..., alias="confirmPassword")

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞

class UserLogin(BaseModel):
    username: str
    password: str

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register")
async def register(user_data: UserRegister, db: AsyncSession = Depends(get_db)):
    
    print("üìå [DEBUG] –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", user_data.model_dump())  # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if user_data.password != user_data.confirm_password:
        raise HTTPException(status_code=400, detail="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")

    user_data.username = user_data.username.strip().lower()
    existing_user = await db.execute(select(User).where(func.lower(User.username) == user_data.username.lower()))
    if existing_user.scalar():
        raise HTTPException(status_code=409, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    user_data.email = user_data.email.strip().lower()
    existing_email = await db.execute(select(User).where(func.lower(User.email) == user_data.email.lower()))
    if existing_email.scalar():
        raise HTTPException(status_code=409, detail="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")

    try:
        # üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
        new_user = User(
            username=user_data.username,
            email=user_data.email,
            password=generate_password_hash(user_data.password),
            coins=500,
            nullings=0.0,
            level=1,
            xp=0,
            avatar="/api/profile/avatars/default_avatar.png",
            gender="UNKNOWN"
        )
        db.add(new_user)
        await db.flush()  # –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –ø–æ–∫–∞

        # üéÅ –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        starter_names = [
    "–†–∂–∞–≤—ã–π –∫–ª—é—á –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
    "–≠–Ω–µ—Ä–≥–æ—Ñ–ª–µ–∫—Å",
    "–ü–æ—Ç—Ä—ë–ø–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç–∫–∞ –Ω–æ–≤–∏—á–∫—É"
]
        result = await db.execute(select(Product).where(Product.name.in_(starter_names)))
        starter_products = result.scalars().all()

        if not starter_products:
            raise HTTPException(status_code=500, detail="–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")

        for product in starter_products:
            item = InventoryItem(
                user_id=new_user.id,
                product_id=product.id,
                quantity=1
            )
            db.add(item)

            # ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        #await send_confirmation_email(
            #user=new_user,
            #db=db,
            #base_url="https://localhost:5002/api"  # ‚Üê –∏–ª–∏ —Ç–≤–æ–π –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å –ø–æ–∑–∂–µ
        #)

        await db.commit()  # ‚úÖ –û–¥–∏–Ω —Ä–∞–∑ ‚Äî –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        return {"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º."}

    except Exception as e:
        await db.rollback()  # ‚ùå –û—Ç–∫–∞—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚úÖ –õ–æ–≥–∏–Ω
# ‚úÖ –õ–û–ì–ò–ù (–∑–∞–º–µ–Ω–∏–ª–∏ AuthJWT –Ω–∞ fastapi-jwt)
@router.post("/login")
async def login(user_data: UserLogin, request: Request, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).where(User.username == user_data.username))
    user = result.scalar()

    if not user or not check_password_hash(user.password, user_data.password):
        raise HTTPException(status_code=401, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

    # ‚õìÔ∏è –°–û–ó–î–ê–Å–ú –¢–û–ö–ï–ù –°–ê–ú–ò
    access_payload = {
        "sub": str(user.id),
        "type": "access",
        "exp": datetime.utcnow() + timedelta(minutes=60),
        "iat": datetime.utcnow(),
    }

    csrf_payload = {
        "sub": str(user.id),
        "type": "csrf",
        "exp": datetime.utcnow() + timedelta(minutes=10),
        "iat": datetime.utcnow(),
    }

    access_token = jwt.encode(access_payload, settings.JWT_SECRET_KEY, algorithm="HS256")
    csrf_token = jwt.encode(csrf_payload, settings.JWT_SECRET_KEY, algorithm="HS256")

    response = Response(
        content=json.dumps({"msg": "Login successful"}),
        status_code=200,
        media_type="application/json"
    )

    response.set_cookie(
        key="access_token_cookie",
        value=access_token,
        httponly=True,
        secure=True,
        samesite="None",
    )
    response.set_cookie(
        key="csrf_access_token",
        value=csrf_token,
        secure=True,
        samesite="None",
    )

    return response

# ‚úÖ –õ–æ–≥–∞—É—Ç (—Ä–µ–≤–æ–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞)
@router.post("/logout")
async def logout():
    resp = JSONResponse({"msg": "logged out"})
    # –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ —Ç—ã —Å—Ç–∞–≤–∏—à—å secure=True, samesite="None"
    resp.delete_cookie(
        "access_token_cookie",
        secure=True,
        samesite="None",
        path="/",               # —Ç–∞–∫–∏–µ –∂–µ!
    )
    resp.delete_cookie(
        "csrf_access_token",
        secure=True,
        samesite="None",
        path="/",
    )
    return resp