#routes.shop.py
import random
import asyncio
import json
from socket_config import sio
from fastapi import APIRouter, Depends, HTTPException, Query, Request
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import Product, InventoryItem, ProductRarity, User
from redis.asyncio import Redis as AsyncRedis
from auth.cookie_auth import get_current_user_from_cookie
from collections import defaultdict
from datetime import datetime

router = APIRouter()

redis = AsyncRedis.from_url("redis://localhost", decode_responses=True)

# üî• –ó–∞–≥—Ä—É–∑–∫–∞ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) –∏–∑ products.json
async def load_products_from_json():
    with open("data/products.json", encoding="utf-8") as file:
        return json.load(file)

async def get_random_products(db: AsyncSession):
    # 1) –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î, –∏—Å–∫–ª—é—á–∞—è –æ—Å–æ–±—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    result = await db.execute(
        select(Product).where(
            Product.stock > 0,
            Product.rarity.notin_([
    ProductRarity.special, 
    ProductRarity.prize, 
    ProductRarity.unique, 
    ProductRarity.vanished, 
    ProductRarity.glitched, 
    ProductRarity.void
])
        )
    )
    products = result.scalars().all()

    if not products:
        print("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞!")
        return []

    # 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π: (—à–∞–Ω—Å, (min_items, max_items), (min_stock, max_stock))
    rarity_weights = {
        ProductRarity.trash: (100, (8, 10), (1, 2)),
        ProductRarity.common: (85, (8, 15), (2, 3)),
        ProductRarity.rare:      (35,  (2, 4), (1, 1)),
        ProductRarity.epic:      (12,   (1, 2), (1, 1)),
        ProductRarity.legendary: (4,   (1, 1), (1, 1)),
        ProductRarity.elder:     (1,   (1, 1), (1, 1)),
    }

    # 3) –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ (product_type -> rarity -> [—Ç–æ–≤–∞—Ä—ã])
    # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–±–µ–∑ product_type)
    rarity_dict = defaultdict(list)
    for p in products:
        if p.rarity in rarity_weights:
            rarity_dict[p.rarity].append(p)

    # 4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã
    selected_products = []

    for rarity, (chance, count_range, stock_range) in rarity_weights.items():
        roll = random.randint(1, 100)
        if roll <= chance:
            available_items = rarity_dict.get(rarity, [])
            if not available_items:
                continue

                # –ö–æ–ª-–≤–æ
            count_min, count_max = count_range
            count_max = min(count_max, len(available_items))
            if count_min > count_max:
                continue

            num_items = random.randint(count_min, count_max)
            chosen = random.sample(available_items, num_items)

                # C—Ç–æ–∫
            stock_min, stock_max = stock_range
            for item in chosen:
                if stock_min > stock_max:
                    continue
                random_stock = random.randint(stock_min, stock_max)

                # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ë–î-–°–¢–û–ö
                item.stock = random_stock
                db.add(item)

                selected_products.append({
                        "id": item.id,
                        "name": item.name,
                        "price": item.price,
                        "rarity": item.rarity.value,
                        "image": item.image,
                        "description": item.description,
                        "stock": random_stock,
                        "product_type": item.product_type.value,
                    })

    print("üõí –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω:", [f"{p['name']} ({p['stock']} —à—Ç.)" for p in selected_products])

     # üß† –ë–µ–∑ —ç—Ç–æ–≥–æ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
    await db.commit()
    
    return selected_products

# --------------------------------
#  –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ c "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º" –∑–∞–≤–æ–∑–æ–º
# --------------------------------
# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: –≤ –∫–∞–∫–æ–π —á–∞—Å –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å
last_reset_hour_key = "global_shop_reset_hour"

async def smart_shop_update(db: AsyncSession):
    shop_key = "global_shop"
    reset_hour_key = last_reset_hour_key

    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å
    current_hour = datetime.now().hour
    last_reset_raw = await redis.get(reset_hour_key)
    last_reset_hour = int(last_reset_raw) if last_reset_raw else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Ä–∞ –ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å
    full_reset_needed = (last_reset_hour != current_hour)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤
    new_products = await get_random_products(db)

    if full_reset_needed:
        print(f"üí• –ù–æ–≤—ã–π —á–∞—Å ({current_hour}) ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω!")
        await redis.set(shop_key, json.dumps(new_products))
        await redis.set(reset_hour_key, current_hour)
        await sio.emit("shop_update", {"products": new_products}, namespace="/shop")
        return

    # üü¢ –ò–Ω–∞—á–µ ‚Äî –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–∑
    print(f"üîÑ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–∑ –≤ {datetime.now().strftime('%H:%M:%S')}")
    existing_raw = await redis.get(shop_key)
    existing = json.loads(existing_raw) if existing_raw else []

    existing_dict = {p["id"]: p for p in existing}
    for item in new_products:
        if item["id"] in existing_dict:
            existing_dict[item["id"]]["stock"] += item["stock"]
        else:
            existing_dict[item["id"]] = item

    final_shop = list(existing_dict.values())
    await redis.set(shop_key, json.dumps(final_shop))
    await sio.emit("shop_update", {"products": final_shop}, namespace="/shop")

    print(f"‚úî –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω. –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(final_shop)}")


# --------------------------------
#  –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º smart_shop_update
# --------------------------------
async def background_shop_updater():
    print("üöÄ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å background_shop_updater() –∑–∞–ø—É—â–µ–Ω!")
    #–†–∞–∑ –≤ 20 —Å–µ–∫ –≤—ã–∑—ã–≤–∞–µ–º smart_shop_update, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —Ä–µ—à–∞–µ—Ç ¬´–¥–æ–±–∞–≤–ª—è—Ç—å¬ª –∏–ª–∏ ¬´—Å–±—Ä–æ—Å–∏—Ç—å¬ª.
    while True:
        await asyncio.sleep(random.randint(15, 40))
        async for db in get_db():
            await smart_shop_update(db)



# ===========================
#  –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω—ã
# ===========================
@router.get("/")
async def get_shop(
    request: Request,
    category: str = Query(None),
    user: User = Depends(get_current_user_from_cookie)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ Redis —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ category."""
    shop_data_raw = await redis.get("global_shop")
    if not shop_data_raw:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ Redis")

    products_data = json.loads(shop_data_raw)

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    mapping = {
        "–µ–¥–∞": ["–µ–¥–∞"],
        "–Ω–∞–ø–∏—Ç–æ–∫": ["–Ω–∞–ø–∏—Ç–æ–∫"],
        "—Å–ª–∞–¥–æ—Å—Ç—å": ["—Å–ª–∞–¥–æ—Å—Ç—å"],
        "–∫–Ω–∏–≥–∞": ["–∫–Ω–∏–≥–∞"],
        "–Ω–∞–∫–ª–µ–π–∫–∞": ["–Ω–∞–∫–ª–µ–π–∫–∞"],
        "–∏–≥—Ä—É—à–∫–∞": ["–∏–≥—Ä—É—à–∫–∞"],
        "–∞–ø—Ç–µ–∫–∞": ["–∞–ø—Ç–µ–∫–∞"],
        "–≥–∞–¥–∂–µ—Ç": ["–≥–∞–¥–∂–µ—Ç"],
        "—Ç—É–∞–ª–µ—Ç": ["—Ç—É–∞–ª–µ—Ç"],
        "—Å—É–≤–µ–Ω–∏—Ä": ["—Å—É–≤–µ–Ω–∏—Ä"],
        "—Å—É—â–µ—Å—Ç–≤–æ": ["—Å—É—â–µ—Å—Ç–≤–æ"],
        "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],
        "–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π": ["–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π"],

        "cosmetic": ["–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π"],
        "cosmetic": ["cosmetic"],
        "toy": ["–∏–≥—Ä—É—à–∫–∞"],
        "tech": ["–≥–∞–¥–∂–µ—Ç"],
        "toilet": ["—Ç—É–∞–ª–µ—Ç"],
        "—Å–ª–∏–≤": ["—Ç—É–∞–ª–µ—Ç"],
        "drugs": ["–∞–ø—Ç–µ–∫–∞"],
        "drug": ["–∞–ø—Ç–µ–∫–∞"],
        "books": ["–∫–Ω–∏–≥–∞"],
        "book": ["–∫–Ω–∏–≥–∞"],
        "–∫–Ω–∏–∂–Ω–∏–∫": ["–∫–Ω–∏–≥–∞"],
        "food": ["–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–ª–∞–¥–æ—Å—Ç—å"],
        "—Å—É—â–µ—Å—Ç–≤–æ": ["creature"],
        "creature": ["—Å—É—â–µ—Å—Ç–≤–æ"],

        "cosmetic": ["–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π", "cosmetic"],
        "zoo": ["—Å—É—â–µ—Å—Ç–≤–æ"],
        "–≤–∏–≤–∞—Ä–∏—É–º": ["zoo"],
        "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π": ["–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–ª–∞–¥–æ—Å—Ç—å"],
        "—Ç–µ—Ö–Ω–æ–ª–∞–π—Ç": ["–≥–∞–¥–∂–µ—Ç"],
        "–ö–æ—Å–º–æ–®–æ–ø": ["–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π", "cosmetic"],
        "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],
        "collectioner": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],
    }

    if category:
        allowed_types = mapping.get(category.lower())
        if allowed_types is None:
            return JSONResponse(
                content={"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"},
                status_code=400
            )
        filtered_products = [
            p for p in products_data
            if p.get("product_type", "").lower() in allowed_types
        ]
    else:
        filtered_products = products_data

    return {"products": filtered_products}


# ===========================
#  –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
# ===========================
@router.post("/buy/{product_id}")
async def buy_product(
    request: Request,
    product_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, —Å–Ω–∏–∂–∞—è –µ–≥–æ —Å—Ç–æ–∫ –≤ Redis."""
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –ë–î –ø–æ–¥ –∑–∞–º–æ–∫
    result = await db.execute(
        select(Product).where(Product.id == product_id).with_for_update()
    )
    product = result.scalar()

    if not user or not product:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏ + –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫ (product.stock)
    if user.coins < product.price:
        raise HTTPException(status_code=400, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!")
    if product.stock <= 0:
        raise HTTPException(status_code=400, detail="–¢–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ (–ø–æ –¥–∞–Ω–Ω—ã–º –ë–î)!")

    # 3. –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏, —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∫ –≤ –ë–î
    user.coins -= product.price
    product.stock -= 1

    # 4. –î–∞–¥–∏–º —á—É—Ç—å XP –∑–∞ –ø–æ–∫—É–ø–∫—É
    await user.add_xp(db, 200)

    # 5. –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–∫–æ–ø–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞)
    new_item = InventoryItem(
        user_id=user.id,
        product_id=product.id,
        quantity=1
    )
    db.add(new_item)

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    db.add(user)
    db.add(product)
    await db.commit()


    # 7. –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º Redis (—É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –≤–∏—Ç—Ä–∏–Ω–µ)
    shop_data_raw = await redis.get("global_shop")
    if shop_data_raw:
        shop_data = json.loads(shop_data_raw)

        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π item
        for item in shop_data:
            if item["id"] == product.id:
                # –£–º–µ–Ω—å—à–∞–µ–º –≤–∏—Ç—Ä–∏–Ω–Ω—ã–π —Å—Ç–æ–∫
                if item["stock"] > 0:
                    item["stock"] -= 1
                # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º —É–ø–∞–ª –≤ 0, –º–æ–∂–Ω–æ –≤—ã–ø–∏–ª–∏—Ç—å:
                if item["stock"] <= 0:
                    item["stock"] = 0
                    # –ò–ª–∏ shop_data.remove(item) ‚Äî —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
                break

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Redis
        await redis.set("global_shop", json.dumps(shop_data))
        # –ò —à–ª—ë–º —Å–æ–∫–µ—Ç —Å–æ–±—ã—Ç–∏–µ
        await sio.emit("shop_update", {"products": shop_data}, namespace="/shop")

    return {"message": f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π {product.name}!"}


#utils.shoputils.py
import json
import asyncio
import redis.asyncio as redis_async  # –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–π!
from config import Config  # —É–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç
from socket_config import sio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from models.models import Product, ProductRarity, ProductType
from config import Config
from sqlalchemy import delete
from routes.shop import get_random_products
from database import async_session

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
redis_client = redis_async.from_url("redis://localhost", decode_responses=True)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON
async def load_products_from_json():
    with open(Config.PRODUCTS_FILE, encoding="utf-8") as file:
        return json.load(file)

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ Redis
async def update_global_shop(new_products):
    await redis_client.set("global_shop", json.dumps(new_products), ex=120)
    print("üìå –ú–∞–≥–∞–∑–∏–Ω –∑–∞–ø–∏—Å–∞–Ω –≤ Redis!")

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Redis
async def get_global_shop():
    data = await redis_client.get("global_shop")
    return json.loads(data) if data else []

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É
async def add_or_update_products_from_json(db: AsyncSession):
    products_data = await load_products_from_json()

    rarity_map = {
        "trash": ProductRarity.trash,
        "common": ProductRarity.common,
        "prize": ProductRarity.prize,
        "rare": ProductRarity.rare,
        "epic": ProductRarity.epic,
        "legendary": ProductRarity.legendary,
        "special": ProductRarity.special,
        "unique": ProductRarity.unique,
        "elder": ProductRarity.elder,
        "vanished": ProductRarity.vanished,
        "glitched": ProductRarity.glitched,
        "void": ProductRarity.void
    }

    # –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤
    type_map = {
        "food": ProductType.food,
        "drink": ProductType.drink,
        "sweet": ProductType.sweet,
        "drug": ProductType.drug,
        "collectible": ProductType.collectible,
        "cosmetic": ProductType.cosmetic,
        "weapon": ProductType.weapon,
        "resource": ProductType.resource,
        "toy": ProductType.toy,
        "souvenir": ProductType.souvenir,
        "artifact": ProductType.artifact,
        "creature": ProductType.creature,
        "book": ProductType.book,
        "tech": ProductType.tech,
        "sticker": ProductType.sticker,
        "toilet": ProductType.toilet,
        "companion": ProductType.companion
    }

    PROTECTED_RARITIES = {
    ProductRarity.special,
    ProductRarity.unique,
    ProductRarity.prize,
    ProductRarity.vanished,
    ProductRarity.glitched,
    ProductRarity.void
}

    result = await db.execute(select(Product))
    existing_products = {p.id: p for p in result.scalars()}

    new_count = 0
    updated_count = 0

    for data in products_data:
        pid = data["id"]
        if pid in existing_products:
            # üßº –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            product = existing_products[pid]
            updated = False

            if product.name != data["name"]:
                product.name = data["name"]
                updated = True
            if product.description != data["description"]:
                product.description = data["description"]
                updated = True
            if product.price != data["price"]:
                product.price = data["price"]
                updated = True
            if product.image != data["image"]:
                product.image = data["image"]
                updated = True
            if product.rarity != rarity_map[data["rarity"]]:
                product.rarity = rarity_map[data["rarity"]]
                updated = True
            if product.product_type != type_map[data["product_type"]]:
                product.product_type = type_map[data["product_type"]]
                updated = True
            if product.custom != data.get("custom", {}):
                product.custom = data.get("custom", {})
                updated = True
            if product.types != data.get("types", []):
                product.types = data.get("types", [])
                updated = True



            if updated:
                updated_count += 1
        else:              
            product = Product(
                id=data["id"],
                name=data["name"],
                description=data["description"],
                price=data["price"],
                image=data["image"],
                rarity=rarity_map[data["rarity"]],
                product_type=type_map[data["product_type"]],
                types=data.get("types", []),
                stock=1,
                custom=data.get("custom", {})
            )
            db.add(product)
            new_count += 1

    await db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {new_count}")
    print(f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}")

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def reset_stock(db: AsyncSession):
    result = await db.execute(select(Product))
    products = result.scalars().all()
    for product in products:
        if product.rarity not in {
            ProductRarity.trash,
            ProductRarity.common,
            ProductRarity.rare,
            ProductRarity.epic,
            ProductRarity.legendary,
            ProductRarity.elder
        }:
            continue  # –∑–∞—â–∏—â–∞–µ–º –º–∞–≥–∞–∑–∏–Ω–Ω—ã–µ
        product.stock = 0  # –∏–ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    await db.commit()
    print("‚úÖ (safe) Reset stock –∑–∞–≤–µ—Ä—à—ë–Ω")