import json
import enum
from datetime import datetime, timezone, date
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, DateTime, select, Float, ARRAY, TIMESTAMP, Date, func, JSON, UniqueConstraint, Index, text
from sqlalchemy.dialects.postgresql import INET, JSONB
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from config import Config
from sqlalchemy.orm import selectinload
from sqlalchemy import Enum as SqlEnum
from database import async_session, Base  # ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π sessionmaker!
from sqlalchemy.ext.mutable import MutableList


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(Config.DATABASE_URL, echo=True, future=True)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π

UTC = timezone.utc

class GenderEnum(str, enum.Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    NONBINARY = "NONBINARY"
    UNKNOWN = "UNKNOWN"

    def to_russian(self):
        return {
            "MALE": "–º—É–∂—Å–∫–æ–π",
            "FEMALE": "–∂–µ–Ω—Å–∫–∏–π",
            "NONBINARY": "–Ω–µ–±–∏–Ω–∞—Ä–Ω—ã–π",
            "UNKNOWN": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        }[self.value]


# üî• ENUM –ö–õ–ê–°–°–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
class UserType(str, enum.Enum):
    OMEZKA = "OMEZKA"
    OMEGAN = "OMEGAN"
    OMEGAKRUT = "OMEGAKRUT"

    def to_russian(self):
        return {
            "OMEZKA": "–û–º–µ–∂–∫–∞",
            "OMEGAN": "–û–º–µ–≥–∞–Ω",
            "OMEGAKRUT": "–û–º–µ–≥–∞–∫—Ä—É—Ç",
        }[self.value]


class VipStatus(str, enum.Enum):
    NONE = "none"
    CRYPTOVOID = "cryptovoid"
    NULLOVERLORD = "nulloverlord"


# üî• –ö–õ–ê–°–° –Æ–ó–ï–†–ê –í FastAPI
class User(Base):
    __tablename__ = "user"

    id = Column(Integer, primary_key=True)
    username = Column(String(100), unique=True, nullable=False, index=True)
    nicknames = Column(MutableList.as_mutable(ARRAY(String)), default=list)
    password = Column(String(200), nullable=False)
    email = Column(String(120), unique=True, nullable=True)
    is_email_confirmed = Column(Boolean, default=False)
    email_token = Column(String, nullable=True)
    avatar = Column(String(200), nullable=False, default='default_avatar.png')
    bio = Column(String(500), default='–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ...')
    coins = Column(Integer, default=500)
    nullings = Column(Float, default=0.0)  # –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º
    xp = Column(Integer, default=0)
    level = Column(Integer, default=1)
    layout = Column(Text, nullable=True)
    total_playtime = Column(Float, default=0.0)
    gender = Column(SqlEnum(GenderEnum, name="gender"), default=GenderEnum.UNKNOWN, nullable=False)
    birthdate = Column(Date, nullable=True)
    user_type = Column(SqlEnum(UserType, name="user_type"), nullable=False, default=UserType.OMEZKA)
    last_ips  = Column(MutableList.as_mutable(ARRAY(INET)),   default=list)
    warning_count = Column(Integer, default=0)
    registration_date = Column(TIMESTAMP(timezone=True), default=func.now())
    last_login = Column(TIMESTAMP(timezone=True), default=func.now(), onupdate=func.now())
    vip_status = Column(SqlEnum(VipStatus, name="vip_status"), default=VipStatus.NONE, nullable=False)
    race_id = Column(Integer, ForeignKey('races.id'), nullable=True)  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å—É
    shop_balance = Column(Integer, default=0)
    vault_balance = Column(Integer, default=0)  # –ú–æ–Ω–µ—Ç—ã –≤ —Å–µ–π—Ñ–µ
    role_id = Column(Integer, ForeignKey("roles.id"), nullable=True)
    pet_slots = Column(Integer, default=3)  # üí° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –ø–∏—Ç–æ–º—Ü–∞
    
    race = relationship("Race", backref="players")  # –°–≤—è–∑—å —Å —Ä–∞—Å–æ–π
    toilet_doom = relationship("ToiletDoom", back_populates="user", uselist=False, cascade="all, delete-orphan")
    sent_gifts = relationship("PendingGift", foreign_keys="[PendingGift.sender_id]", back_populates="sender")
    received_gifts = relationship("PendingGift", foreign_keys="[PendingGift.recipient_id]", back_populates="recipient")
    game_scores = relationship("GameScore", back_populates="user")
    sent_friend_requests = relationship("Friendship", foreign_keys="[Friendship.user_id]", back_populates="user")
    received_friend_requests = relationship("Friendship", foreign_keys="[Friendship.friend_id]", back_populates="friend")
    system_messages = relationship("SystemMessage", back_populates="recipient")
    wall_posts = relationship(
    "WallPost",
    back_populates="user",
    lazy="selectin",
    cascade="all, delete-orphan"
)
    role = relationship("Role", back_populates="users")
    landfill_pickups = relationship("LandfillPickupLimit", back_populates="user", cascade="all, delete-orphan")
    thrown_items = relationship("LandfillItem", back_populates="thrown_by", cascade="all, delete-orphan")
    shop_items = relationship("PersonalShopItem", back_populates="user", cascade="all, delete")
    vault_items = relationship("VaultItem", back_populates="user", cascade="all, delete-orphan")
    pets = relationship("Pet", back_populates="user", cascade="all, delete-orphan")
    pet_wardrobe = relationship(
    "UserPetWardrobeItem",
    back_populates="user",
    cascade="all, delete-orphan"
)

    def get_xp_to_next_level(self) -> int:
        return 100 + (self.level * 20)


    def add_nickname(self, new_username):
        if self.username != new_username:
            if self.nicknames is None:
                self.nicknames = []
            self.nicknames.append(self.username)
            self.username = new_username

    def add_ip(self, ip_address):
        if self.last_ips is None:
            self.last_ips = []
        if ip_address not in self.last_ips:
            self.last_ips.append(ip_address)
            if len(self.last_ips) > 5:  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 IP
                self.last_ips.pop(0)


    def __repr__(self):
        return f'<User {self.username}, Level {self.level}, XP {self.xp}>'



    async def add_xp(self, session: AsyncSession, amount: int):
        self.xp += amount
        xp_needed = self.get_xp_to_next_level()

        while self.xp >= xp_needed:
            self.level += 1
            self.xp -= xp_needed
            xp_needed = self.get_xp_to_next_level()



# üî• –§–£–ù–ö–¶–ò–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–î-–°–ï–°–°–ò–ò
async def get_db():
    async with async_session() as session:
        yield session


class Race(Base):
    __tablename__ = "races"

    id = Column(Integer, primary_key=True)
    code = Column(String(50), unique=True, nullable=False)
    image_url = Column(String, nullable=True)
    display_name = Column(String(100), nullable=False)
    vibe = Column(String(255), nullable=True)
    description = Column(Text, nullable=True)
    is_selectable = Column(Boolean, default=True)  # –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ


class Role(Base):
    __tablename__ = "roles"

    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True, nullable=False)

    users = relationship("User", back_populates="role")

class WallPost(Base):
    __tablename__ = "wall_posts"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    text = Column(Text, nullable=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc).replace(tzinfo=None))

    # üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="wall_posts")
    comments = relationship("WallComment", back_populates="post", cascade="all, delete-orphan")
    likes = relationship("WallLike", back_populates="post", cascade="all, delete-orphan")



    async def to_dict(self, include_author=False, current_user_id=None):
        return {
            "id": self.id,
            "user_id": self.user_id,
            "text": self.text,
            "created_at": self.created_at.isoformat(),
            "likes": len(self.likes),
            "liked_by_me": any(l.user_id == current_user_id for l in self.likes) if current_user_id else False,
            "author": {
                "id": self.user.id,
                "username": self.user.username
            } if include_author and self.user else None
        }

    @staticmethod
    async def get_wall_posts(user_id: int):
        """–í–µ—Ä–Ω—ë—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π user"""
        async with async_session() as session:
            result = await session.execute(
                select(WallPost)
                .options(selectinload(WallPost.user))
                .where(WallPost.user_id == user_id)
                .order_by(WallPost.created_at.desc())
            )
            return result.scalars().all()

    @staticmethod
    async def add_wall_post(user_id: int, text: str):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç"""
        async with async_session() as session:
            post = WallPost(user_id=user_id, text=text)
            session.add(post)
            await session.commit()
            await session.refresh(post)
            return post 


class WallComment(Base):
    __tablename__ = "wall_comments"

    id = Column(Integer, primary_key=True)
    post_id = Column(Integer, ForeignKey("wall_posts.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    text = Column(Text, nullable=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc).replace(tzinfo=None))

    user = relationship("User")  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å back_populates –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    post = relationship("WallPost", back_populates="comments")

class WallLike(Base):
    __tablename__ = "wall_likes"

    id = Column(Integer, primary_key=True)
    post_id = Column(Integer, ForeignKey("wall_posts.id", ondelete="CASCADE"), nullable=False)
    user_id = Column(Integer, ForeignKey("user.id", ondelete="CASCADE"), nullable=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc).replace(tzinfo=None))
    __table_args__ = (
    UniqueConstraint("post_id", "user_id", name="uq_wall_like_post_user"),
)
    post = relationship("WallPost", back_populates="likes")
    user = relationship("User")


class Friendship(Base):
    __tablename__ = "friends"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    friend_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    status = Column(String(20), default="pending")  # "pending" (–æ–∂–∏–¥–∞–Ω–∏–µ), "accepted" (–ø—Ä–∏–Ω—è—Ç–æ)

    user = relationship("User", foreign_keys=[user_id], back_populates="sent_friend_requests")
    friend = relationship("User", foreign_keys=[friend_id], back_populates="received_friend_requests")

    @staticmethod
    async def get_friends(user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ASYNC)"""
        async with async_session() as session:
            result = await session.execute(
                select(Friendship).where(Friendship.user_id == user_id, Friendship.status == "accepted")
            )
            return result.scalars().all()

    @staticmethod
    async def add_friend(user_id, friend_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∞ (ASYNC)"""
        async with async_session() as session:
            new_friendship = Friendship(user_id=user_id, friend_id=friend_id, status="pending")
            session.add(new_friendship)
            await session.commit()
            return {"message": "–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"}

    @staticmethod
    async def accept_friend_request(user_id, friend_id):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è (ASYNC)"""
        async with async_session() as session:
            friendship = await session.execute(
                select(Friendship).where(Friendship.user_id == friend_id, Friendship.friend_id == user_id, Friendship.status == "pending")
            )
            friendship = friendship.scalar()
            if friendship:
                friendship.status = "accepted"
                await session.commit()
                return {"message": "–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω!"}
            return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!"}

    @staticmethod
    async def remove_friend(user_id, friend_id):
        """–£–¥–∞–ª—è–µ—Ç –¥—Ä—É–≥–∞ (ASYNC)"""
        async with async_session() as session:
            friendship = await session.execute(
                select(Friendship).where(
                    (Friendship.user_id == user_id, Friendship.friend_id == friend_id) |
                    (Friendship.user_id == friend_id, Friendship.friend_id == user_id)
                )
            )
            friendship = friendship.scalar()
            if friendship:
                await session.delete(friendship)
                await session.commit()
                return {"message": "–î—Ä—É–≥ —É–¥–∞–ª—ë–Ω!"}
            return {"error": "–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"}


class AchievementTriggerType(str, enum.Enum):
    ITEM_OBTAINED = "item_obtained"
    ITEM_USED = "item_used"
    BOOK_READ = "book_read"
    COLLECTION_COMPLETED = "collection_completed"
    ACTIVITY_DONE = "activity_done"
    DAILY_COMPLETED = "daily_completed"
    INVENTORY_FULL = "inventory_full"
    TOILET_VISITED = "toilet_visited"
    MESSAGE_SENT = "message_sent"
    FRIEND_ADDED = "friend_added"
    GIFT_SENT = "gift_sent"
    SECRET_FOUND = "secret_found"
    NULLING_EARNED = "nulling_earned"
    LEVEL_REACHED = "level_reached"


class Achievement(Base):
    __tablename__ = "achievements"

    id = Column(String(50), primary_key=True)  # id –∏–∑ JSON, –∫–∞–∫ —É —Ç–µ–±—è
    name = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    icon = Column(String, nullable=True)
    is_hidden = Column(Boolean, default=False)

    trigger_type = Column(SqlEnum(AchievementTriggerType, name="achievement_trigger_type"), nullable=False)
    trigger_data = Column(JSON, nullable=True)  # –ª—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    reward = Column(JSON, nullable=True)  # {"coins": 50, "xp": 100}


class UserAchievement(Base):
    __tablename__ = "user_achievements"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    achievement_id = Column(String(50), ForeignKey("achievements.id"), nullable=False)
    earned_at = Column(DateTime, default=datetime.now(UTC))  # –ö–æ–≥–¥–∞ –∞—á–∏–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞

    user = relationship("User", backref="unlocked_achievements")
    achievement = relationship("Achievement")

    def to_dict(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—á–∏–≤–∫—É –≤ JSON-—Ñ–æ—Ä–º–∞—Ç"""
        return {
            "achievement_id": self.achievement_id,
            "earned_at": self.earned_at.isoformat(),
        }


class Leaderboard(Base):
    __tablename__ = 'leaderboard'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    category = Column(String(50), nullable=False)  # "money", "games", "pvp"
    score = Column(Integer, default=0, nullable=False)
    last_updated = Column(DateTime, default=datetime.now(UTC))

    user = relationship("User", backref="leaderboard_entries")

    def to_dict(self):
        return {
            "id": self.id,
            "user_id": self.user_id,
            "username": self.user.username,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
            "category": self.category,
            "score": self.score,
            "last_updated": self.last_updated.isoformat(),
        }


class GameScore(Base):
    __tablename__ = "game_scores"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    game_id = Column(Integer, nullable=False)  # ID –º–∏–Ω–∏-–∏–≥—Ä—ã
    score = Column(Integer, nullable=False, default=0)
    timestamp = Column(DateTime, default=datetime.now(timezone.utc))

    user = relationship("User", back_populates="game_scores")

    def to_dict(self):
        return {
            "id": self.id,
            "user_id": self.user_id,
            "game_id": self.game_id,
            "score": self.score,
            "timestamp": self.timestamp.isoformat()
        }

        

# –ú–æ–¥–µ–ª—å News
class News(Base):
    __tablename__ = "news"  # ‚úÖ –¢–µ–ø–µ—Ä—å SQLAlchemy –∑–Ω–∞–µ—Ç, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞!

    id = Column(Integer, primary_key=True)
    title = Column(String(200), nullable=False)
    content = Column(Text, nullable=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))

    def __repr__(self):
        return f"<News {self.title}>"

    @staticmethod
    async def get_latest_news(limit=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (ASYNC)"""
        async with async_session() as session:
            result = await session.execute(
                select(News).order_by(News.created_at.desc()).limit(limit)
            )
            return result.scalars().all()

    @staticmethod
    async def add_news(title, content):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å (ASYNC)"""
        async with async_session() as session:
            new_news = News(title=title, content=content)
            session.add(new_news)
            await session.commit()
            return {"message": "–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!"}


class ProductType(enum.Enum):
    food = "–µ–¥–∞"
    drink = "–Ω–∞–ø–∏—Ç–æ–∫"
    sweet = "—Å–ª–∞–¥–æ—Å—Ç—å"
    drug = "–∞–ø—Ç–µ–∫–∞"
    collectible = "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π"
    cosmetic = "–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π"
    weapon = "–æ—Ä—É–∂–∏–µ"
    resource = "—Ä–µ—Å—É—Ä—Å"
    toy = "–∏–≥—Ä—É—à–∫–∞"
    souvenir = "—Å—É–≤–µ–Ω–∏—Ä"
    artifact = "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
    creature = "creature"
    book = "–∫–Ω–∏–≥–∞"
    tech = "–≥–∞–¥–∂–µ—Ç"
    sticker = "–Ω–∞–∫–ª–µ–π–∫–∞"
    toilet = "—Ç—É–∞–ª–µ—Ç"


class ProductRarity(enum.Enum):
    #–≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —à–∞–Ω—Å–æ–º:
    trash = "–º—É—Å–æ—Ä–Ω—ã–π"
    frequent = "—á–∞—Å—Ç—ã–π"
    common = "–æ–±—ã—á–Ω—ã–π"
    rare = "—Ä–µ–¥–∫–∏–π"
    valuable = "—Ü–µ–Ω–Ω—ã–π"  # üí∞ —Å—é–¥–∞!
    epic = "—ç–ø–∏—á–µ—Å–∫–∏–π"
    legendary = "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
    relict = "—Ä–µ–ª–∏–∫—Ç–æ–≤—ã–π"   # üß¨ –Ω–æ–≤—ã–π elder

    vanished = "–∏—Å—á–µ–∑–Ω—É–≤—à–∏–π" #–ø—Ä–µ–¥–º–µ—Ç—ã, –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–∑ –∏–≥—Ä—ã
    
    prize = "–ø—Ä–∏–∑–æ–≤–æ–π" #–ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö
    
    special = "–æ—Å–æ–±—ã–π" #–∏–≤–µ–Ω—Ç–æ–≤—ã–µ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    
    unique = "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π" #—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–¥ –∑–∞–∫–∞–∑
    
    glitched = "–≥–ª–∏—Ç—á–µ–≤—ã–π" #–ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –¥–æ–Ω–∞—Ç-—à–æ–ø–∞
    
    void = "–ø—É—Å—Ç–æ—Ç–Ω—ã–π" #—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ä–∞–∑–ª–æ–º–∞

    

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    description = Column(Text, nullable=True)
    price = Column(Integer, nullable=False)  # –¶–µ–Ω–∞ –≤ –∫–æ–∏–Ω–∞—Ö
    image = Column(String(100), nullable=True)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    rarity = Column(SqlEnum(ProductRarity, name="product_rarity"), nullable=False, default=ProductRarity.common)
    product_type = Column(SqlEnum(ProductType, name="product_type"), nullable=False, default=ProductType.drink)
    stock = Column(Integer, nullable=False, default=1)
    custom = Column(JSON, default=dict)
    is_nulling_only = Column(Boolean, default=False)  # üî• –¢–æ–ª—å–∫–æ –∑–∞ –Ω—É–ª–ª–∏–Ω–≥–∏
    nulling_price = Column(Float, default=0.0)  # –¶–µ–Ω–∞ –≤ –Ω—É–ª–ª–∏–Ω–≥–∞—Ö, –µ—Å–ª–∏ is_nulling_only=True


    items = relationship('InventoryItem', back_populates='product', cascade="all, delete-orphan")
    shop_entries = relationship("PersonalShopItem", back_populates="product", cascade="all, delete")
    wardrobe_entries = relationship(
    "UserPetWardrobeItem",
    back_populates="product",
    cascade="all, delete-orphan"
)

    def __repr__(self):
        return f"<Product {self.name}, Type: {self.product_type.value}, Rarity: {self.rarity.value}>"

class InventoryItem(Base):
    __tablename__ = "user_inventory"
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=False, index=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False, index=True)
    quantity = Column(Integer, default=1)
    created_at = Column(DateTime, server_default=func.now())  # üî• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞

    product = relationship('Product', back_populates='items')
    user = relationship("User", backref="inventory")
    gift_links = relationship("PendingGift", back_populates="item")
    incubation = relationship(
    "Incubation",
    uselist=False,                      # üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –æ–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É
    back_populates="inventory_item",
    lazy="joined"                       # –∏–ª–∏ "selectin"
)


    def is_locked(self):
        return self.incubation is not None and not self.incubation.is_hatched




class PrivateMessage(Base):
    __tablename__ = 'private_message'
    id = Column(Integer, primary_key=True)
    sender_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    recipient_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    subject = Column(String(200), default="")
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.now(UTC))
    is_read = Column(Boolean, default=False)
    read_at = Column(DateTime, nullable=True)  # üî• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è

    sender = relationship('User', foreign_keys=[sender_id], backref='sent_messages')
    recipient = relationship('User', foreign_keys=[recipient_id], backref='received_messages')


class SystemMessageType(str, enum.Enum):
    ADMIN = "admin" 

    RANDOM_EVENT = "random_event"                     
    EVENT_NEGATIVE = "event_negative"    
    EVENT_POSITIVE = "event_positive"    
    BOT = "bot"                          
    LEVEL_UP = "level_up"                
    AUCTION_RESULT = "auction_result"    
    TRADE_PROPOSAL = "trade_proposal"    
    AI_ASSISTANT = "ai_assistant"        
    
    FRIEND_REQUEST = "friend_request"    
    FRIEND_ACCEPTED = "friend_accepted"   
    FRIEND_REJECTED = "friend_rejected"
    FRIEND_CANCELLED = "friend_cancelled"
    
    NPC_EVENT = "npc_event"           
    REPUTATION = "reputation_change"     
    
    GIFT = "gift" 
    GIFT_RECEIVED = "gift_received"  
    GIFT_ACCEPTED = "gift_accepted"  
    GIFT_REJECTED = "gift_rejected"  


class SystemMessage(Base):
    __tablename__ = "system_messages"

    id = Column(Integer, primary_key=True)
    recipient_id = Column(Integer, ForeignKey("user.id"), nullable=False)

    message_type = Column(
    SqlEnum(SystemMessageType, name="system_message_type"),
    nullable=False
)
    title = Column(String(100), default="üì© –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

    is_read = Column(Boolean, default=False)
    read_at = Column(DateTime, nullable=True)

    related_id = Column(Integer, nullable=True)
    is_actioned = Column(Boolean, default=False)

    recipient = relationship("User", back_populates="system_messages")



class ForumThread(Base):
    """–¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º —Ñ–æ—Ä—É–º–∞"""
    __tablename__ = 'forum_threads'

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    views = Column(Integer, default=0)
    created_at = Column(DateTime, default=datetime.now(UTC))
    updated_at = Column(DateTime, default=datetime.now(UTC), onupdate=datetime.now(UTC))

    posts = relationship('ForumPost', backref='thread', lazy=True, cascade="all, delete-orphan")

    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "views": self.views,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat(),
            "post_count": len(self.posts)
        }

class ForumPost(Base):
    """–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–∞—Ö —Ñ–æ—Ä—É–º–∞"""
    __tablename__ = 'forum_posts'

    id = Column(Integer, primary_key=True)
    thread_id = Column(Integer, ForeignKey('forum_threads.id'), nullable=False)
    author = Column(String(100), nullable=False)
    content = Column(Text, nullable=False)
    created_at = Column(DateTime, default=datetime.now(UTC))
    author_id = Column(Integer, ForeignKey("user.id"))

    def to_dict(self):
        return {
            "id": self.id,
            "thread_id": self.thread_id,
            "author": self.author,
            "content": self.content,
            "created_at": self.created_at.isoformat()
        }
    
    
    author = relationship("User", backref="forum_posts")

class PendingGift(Base):
    __tablename__ = "pending_gifts"

    id = Column(Integer, primary_key=True, index=True)
    sender_id = Column(Integer, ForeignKey("user.id"))
    recipient_id = Column(Integer, ForeignKey("user.id"))
    item_id = Column(Integer, ForeignKey("user_inventory.id"))
    timestamp = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    sender = relationship("User", foreign_keys=[sender_id], back_populates="sent_gifts")
    recipient = relationship("User", foreign_keys=[recipient_id], back_populates="received_gifts")
    item = relationship("InventoryItem", back_populates="gift_links")



# –ú–æ–¥–µ–ª—å –≤ –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
class TokenBlocklist(Base):
    __tablename__ = "token_bl"
    id = Column(Integer, primary_key=True)
    jti = Column(String(36), nullable=False, index=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

# üî• –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

class ToiletDoom(Base):
    __tablename__ = "toilet_doom"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), unique=True)

    clean = Column(Boolean, default=True)
    last_visit = Column(DateTime, default=datetime.now(timezone.utc))
    like_count = Column(Integer, default=0)
    dislike_count = Column(Integer, default=0)
    decor = Column(JSON, default={})  # —Ö—Ä–∞–Ω–∏—Ç —É–∫—Ä–∞—à–µ–Ω–∏—è
    notes = Column(Text, default="")  # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ (—Å–∏—Å—Ç–µ–º–Ω—ã–µ)

    user = relationship("User", back_populates="toilet_doom")

class ToiletCooldown(Base):
    __tablename__ = "toilet_cooldowns"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    target_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    next_available = Column(DateTime, nullable=False)

class ToiletVote(Base):
    __tablename__ = "toilet_votes"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    target_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    vote_type = Column(String(10), nullable=False)  # 'like' or 'dislike'
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

class LandfillItem(Base):
    __tablename__ = "landfill_items"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=False)
    quantity = Column(Integer, default=1)
    thrown_by_id = Column(Integer, ForeignKey("user.id"), nullable=True)
    thrown_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    product = relationship("Product")
    thrown_by = relationship("User", back_populates="thrown_items")

class LandfillPickupLimit(Base):
    __tablename__ = "landfill_pickup_limit"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    date = Column(Date, default=lambda: datetime.now().date())
    count = Column(Integer, default=0)

    user = relationship("User", back_populates="landfill_pickups")

class UserLibrary(Base):
    __tablename__ = "user_library"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    added_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    user = relationship("User", backref="library_books")
    product = relationship("Product")

class BookContent(Base):
    __tablename__ = "book_content"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    page_number = Column(Integer, nullable=False)
    text = Column(Text, nullable=False)

    product = relationship("Product", backref="pages")


class Collection(Base):
    __tablename__ = "collections"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)
    image = Column(String)

class CollectionItem(Base):
    __tablename__ = "collection_items"

    id = Column(Integer, primary_key=True)
    collection_id = Column(Integer, ForeignKey("collections.id"), nullable=False)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)

    collection = relationship("Collection", backref="items")
    product = relationship("Product")


class UserCollectionItem(Base):
    __tablename__ = "user_collection_items"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False)
    added_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    user = relationship("User", backref="collected_items")
    product = relationship("Product")


class RewardType(str, enum.Enum):
    COINS = "coins"
    XP = "xp"
    NULLINGS = "nullings"
    ITEM = "item"
    RANDOM = "random"  # —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    TITLE = "title"    # —Ä–µ–¥–∫–∏–π —Ç–∏—Ç—É–ª –∏–≥—Ä–æ–∫—É

class ActivityType(str, enum.Enum):
    DAILY = "daily"         # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤—ã–¥–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
    NPC = "npc"             # –ü—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É NPC
    SPECIAL = "special"     # –°–æ–±—ã—Ç–∏–π–Ω–∞—è –∏–ª–∏ –ø–∞—Å—Ö–∞–ª—å–Ω–∞—è
    HIDDEN = "hidden"       # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    STORY = "story"         # –ß–∞—Å—Ç—å —Å—é–∂–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏

class Activity(Base):
    __tablename__ = "activities"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)
    type = Column(SqlEnum(ActivityType, name="activity_type_enum"), nullable=False)
    reward = Column(JSON)  # {"coins": 10, "xp": 50}
    cooldown_seconds = Column(Integer, nullable=True)


class UserActivity(Base):
    __tablename__ = "user_activities"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    activity_id = Column(Integer, ForeignKey("activities.id"), nullable=False)
    completed_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    user = relationship("User", backref="activity_log")
    activity = relationship("Activity")


class DailyActivityPool(Base):
    __tablename__ = "daily_activity_pool"

    id = Column(Integer, primary_key=True)
    activity_id = Column(Integer, ForeignKey("activities.id"), nullable=False)
    weight = Column(Integer, default=1)  # —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è
    is_enabled = Column(Boolean, default=True)

    activity = relationship("Activity", backref="pool_entries")

class UserDailyActivity(Base):
    __tablename__ = "user_daily_activities"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    activity_id = Column(Integer, ForeignKey("activities.id"), nullable=False)
    assigned_at = Column(Date, default=date.today)
    is_completed = Column(Boolean, default=False)

    user = relationship("User", backref="daily_activities")
    activity = relationship("Activity")

class UserActivityProgress(Base):
    __tablename__ = "user_activity_progress"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"))
    activity_id = Column(Integer, ForeignKey("activities.id"))
    current = Column(Integer, default=0)
    goal = Column(Integer, nullable=False)

    user = relationship("User", backref="activity_progress")
    activity = relationship("Activity")


class Match3Score(Base):
    __tablename__ = "match3_scores"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)
    score = Column(Integer, nullable=False)
    combos = Column(Integer)
    coins_earned = Column(Integer)
    xp_earned = Column(Integer)
    is_rewarded = Column(Boolean, default=False)
    submitted_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    user = relationship("User", backref="match3_scores")


class PersonalShopItem(Base):
    __tablename__ = "personal_shop_items"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    price = Column(Integer, nullable=False)
    quantity = Column(Integer, nullable=False, default=1)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    is_published = Column(Boolean, default=False)

    user = relationship("User", back_populates="shop_items")
    product = relationship("Product", back_populates="shop_entries")


class ShopTransaction(Base):
    __tablename__ = "shop_transactions"

    id = Column(Integer, primary_key=True)
    seller_id = Column(Integer, ForeignKey("user.id"))
    buyer_id = Column(Integer, ForeignKey("user.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, nullable=False)
    price_per_unit = Column(Integer, nullable=False)
    total_price = Column(Integer, nullable=False)
    timestamp = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    seller = relationship("User", foreign_keys=[seller_id])
    buyer = relationship("User", foreign_keys=[buyer_id])
    product = relationship("Product")


class VaultItem(Base):
    __tablename__ = "vault_items"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, default=1)
    is_favorite = Column(Boolean, default=False)  # <-- –Ω–æ–≤–µ–Ω—å–∫–æ–µ –ø–æ–ª–µ

    user = relationship("User", back_populates="vault_items")
    product = relationship("Product")


class Pet(Base):
    __tablename__ = "pets"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id", ondelete="CASCADE"), index=True)
    image = Column(String(255), nullable=True)
    name = Column(String(100), default="Unnamed")
    birthdate = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    race_code = Column(String(50))
    level = Column(Integer, default=1)
    intelligence = Column(Integer, default=0)
    fullness = Column(Integer, default=50)
    energy = Column(Integer, default=100)
    health = Column(Integer, default=100)
    mood = Column(String(50), default="neutral")
    bond = Column(Integer, default=0)
    trait = Column(String(100), nullable=True)
    favorite_foods = Column(JSON, default=list)
    anomaly_level = Column(Integer, default=0)
    ai_persona = Column(String(50), default="silent")
    created_at = Column(DateTime, default=func.now())
    last_update = Column(DateTime, default=func.now(), onupdate=func.now())

    appearance = relationship("PetAppearance", back_populates="pet",
                              cascade="all, delete-orphan")
    user = relationship("User", back_populates="pets")


class Incubation(Base):
    __tablename__ = "pet_incubation"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"))
    inventory_item_id = Column(Integer, ForeignKey("user_inventory.id"), nullable=True)
    started_at = Column(DateTime(timezone=True))
    hatch_at   = Column(DateTime(timezone=True))
    is_hatched = Column(Boolean, default=False)
    __table_args__ = (
        Index(
            "uq_one_active_incubation",
            "user_id",
            unique=True,
            postgresql_where=text("is_hatched = false")
        ),
    )

    # üîÑ relationships
    user = relationship("User", backref="incubations")
    inventory_item = relationship("InventoryItem", back_populates="incubation")
    

class WardrobeSlot(str, enum.Enum):
    background = "—Ñ–æ–Ω"
    aura       = "–æ–∫—Ä—É–∂–µ–Ω–∏–µ"
    companion       = "—Å–ø—É—Ç–Ω–∏–∫"
    body    = "—Ç–µ–ª–æ"    
    interior = "–∏–Ω—Ç–µ—Ä—å–µ—Ä"
    dye = "—ç—Å—Å–µ–Ω—Ü–∏—è" #—ç—Ç–æ –∏ –µ—Å—Ç—å –∫—Ä–∞—Å–∫–∏ –Ω–∞ –±–∞–∑—É –ø–∏—Ç–æ–º—Ü–∞
    makeup = "–º–∞–∫–∏—è–∂"
    paws = "–ª–∞–ø—ã"
    wings   = "–∫—Ä—ã–ª—å—è"
    eyes    = "–≥–ª–∞–∑–∞"
    head    = "–≥–æ–ª–æ–≤–∞"
    tail    = "—Ö–≤–æ—Å—Ç"
    accessory   = "–∞–∫—Å–µ—Å—Å—É–∞—Ä"
    face    = "–º–æ—Ä–¥–∞"
    skin    = "–ø–æ–∫—Ä–æ–≤"
    base = "–±–∞–∑–∞" #–±–∞–∑–æ–≤—ã–π —Å–ª–æ–π (–ø–∏—Ç–æ–º–µ—Ü) –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    foreground = "–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω"
    tattoo = "—Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞"
    glow = "—Å–≤–µ—á–µ–Ω–∏–µ" 
    floor      = "–ø–æ–ª"
    neck = "—à–µ—è"
    ears = "—É—à–∏"
    gadget = "–≥–∞–¥–∂–µ—Ç"

class UserPetWardrobeItem(Base):
    __tablename__ = "user_pet_wardrobe_items"

    id        = Column(Integer, primary_key=True)
    user_id   = Column(Integer, ForeignKey("user.id", ondelete="CASCADE"), index=True)
    product_id = Column(Integer, ForeignKey("products.id", ondelete="CASCADE"), nullable=False)
    slot      = Column(SqlEnum(WardrobeSlot), nullable=False)
    quantity  = Column(Integer, default=1)

    user    = relationship("User", back_populates="pet_wardrobe")
    product = relationship("Product", back_populates="wardrobe_entries", lazy="joined")




class PetAppearance(Base):
    __tablename__ = "pet_appearance"

    id          = Column(Integer, primary_key=True)
    pet_id      = Column(Integer, ForeignKey("pets.id", ondelete="CASCADE"), index=True)
    slot        = Column(SqlEnum(WardrobeSlot), nullable=False)
    product_id = Column(
    Integer,
    ForeignKey("products.id", ondelete="SET NULL"),
    nullable=True  # üî• —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à—ë–Ω NULL
)
    layer_index = Column(Integer, nullable=False, default=0)
    wardrobe_id = Column(Integer, ForeignKey("user_pet_wardrobe_items.id"))


    updated_at  = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())
    created_at  = Column(DateTime(timezone=True), default=func.now())

    __table_args__ = (
        UniqueConstraint("pet_id", "slot", "layer_index", name="uq_pet_slot_layer"),
        Index("ix_pet_slot", "pet_id", "slot"),
    )

    pet     = relationship("Pet", back_populates="appearance")
    product = relationship("Product", lazy="joined")




class PetRenderConfig(Base):
    __tablename__ = "pet_render_config"

    pet_id = Column(Integer, ForeignKey("pets.id", ondelete="CASCADE"), primary_key=True)
    slot_order = Column(JSONB, default=list)  # ‚¨ÖÔ∏è –∑–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å JSONB
    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now())

    pet = relationship("Pet", backref="render_config", uselist=False)


class PetRenderSnapshot(Base):
    __tablename__ = "pet_render_snapshots"

    id = Column(Integer, primary_key=True)
    pet_id = Column(Integer, ForeignKey("pets.id", ondelete="CASCADE"), index=True)
    user_id = Column(Integer, ForeignKey("user.id", ondelete="CASCADE"), index=True)
    theme = Column(String(100), nullable=True)


    slot_order = Column(MutableList.as_mutable(ARRAY(Integer)), default=list)
    appearance = Column(JSON, nullable=False)  # –ø–æ–ª–Ω—ã–π snapshot appearance = {slot: [product_id]}
    image_url = Column(String, nullable=True)  # –µ—Å–ª–∏ —Å—Ä–µ–Ω–¥–µ—Ä–∏–ª–∏ png –∑–∞—Ä–∞–Ω–µ–µ
    submitted_at = Column(DateTime(timezone=True), server_default=func.now())
    votes = Column(Integer, default=0)

    contest_id = Column(Integer, ForeignKey("contests.id", ondelete="SET NULL"), nullable=True)

    __table_args__ = (
    UniqueConstraint("pet_id", "contest_id", name="uq_pet_contest_snapshot"),
)


    # ‚ùó –µ—Å–ª–∏ pet –ø–æ—Ç–æ–º —É–¥–∞–ª—è—Ç ‚Äî snapshot –æ—Å—Ç–∞–Ω–µ—Ç—Å—è
    pet = relationship("Pet", backref="render_snapshots")
    user = relationship("User")
 
    def to_dict(self):
            return {
            "id": self.id,
            "pet_id": self.pet_id,
            "user_id": self.user_id,
            "slot_order": self.slot_order,
            "appearance": self.appearance,
            "image_url": self.image_url,
            "submitted_at": self.submitted_at.isoformat(),
            "contest_id": self.contest_id,
            "votes": self.votes,
            "theme": self.theme,
            }

class Contest(Base):
    __tablename__ = "contests"

    id = Column(Integer, primary_key=True)
    title = Column(String(100), nullable=False)
    description = Column(Text, nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), default=func.now())






