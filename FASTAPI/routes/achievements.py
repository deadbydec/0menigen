import os
import json
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi_jwt import JwtAccessBearer, JwtAuthorizationCredentials
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from pydantic import BaseModel
from models.models import User, UserAchievement
from config import Config

jwt_access = JwtAccessBearer(secret_key="supersecretkey")

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª —Å –∞—á–∏–≤–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
BASE_DIR = Config.BASE_DIR
ACHIEVEMENTS_FILE = Config.ACHIEVEMENTS_FILE

router = APIRouter(prefix="/api/achievements", tags=["Achievements"])

# üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—á–∏–≤–æ–∫ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_achievements():
    if os.path.exists(ACHIEVEMENTS_FILE):
        with open(ACHIEVEMENTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–¥–∞—á–∏ –∞—á–∏–≤–∫–∏
class UnlockAchievementRequest(BaseModel):
    achievement_id: str

@router.get("/view")
async def get_achievements(credentials: JwtAuthorizationCredentials = Depends(jwt_access), db: AsyncSession = Depends(get_db)):
    user_id = credentials.subject["user_id"]
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—á–∏–≤–∫–∏ –∏–∑ –ë–î (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    all_achievements = db.session.query(UserAchievement).all()
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞—á–∏–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É —é–∑–µ—Ä–∞
    user_achievements = {ach.achievement_id for ach in db.session.query(UserAchievement).filter_by(user_id=user_id).all()}

    achievements_data = [
        {
            "id": ach.id,
            "title": ach.title,
            "description": ach.description,
            "icon": ach.icon_url,
            "unlocked": ach.id in user_achievements,
            "date": ach.date_unlocked.isoformat() if ach.id in user_achievements and ach.date_unlocked else None
        }
        for ach in all_achievements
    ]
    return JSONResponse(content=achievements_data)

# üî• API: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞—á–∏–≤–æ–∫ –∏–∑ JSON
@router.get("/all")
def get_all_achievements():
    return JSONResponse(content=load_achievements())

# üî• API: –ü–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–Ω–Ω—ã–µ –∏–∑ JSON, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å –ë–î)
@router.get("/")
async def get_user_achievements(credentials: JwtAuthorizationCredentials = Depends(jwt_access), db: AsyncSession = Depends(get_db)):
    user_id = credentials.subject["user_id"]
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—á–∏–≤–∫–∏ —é–∑–µ—Ä–∞ –∏–∑ –ë–î
    result = await db.execute(select(UserAchievement).where(UserAchievement.user_id == user.id))
    user_achievements = result.scalars().all()
    achievement_ids = {ach.achievement_id for ach in user_achievements}

    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É –∏–∑ JSON-—Ñ–∞–π–ª–∞
    all_achievements = load_achievements()
    user_achievements_list = [ach for ach in all_achievements if ach["id"] in achievement_ids]

    return JSONResponse(content=user_achievements_list)

# üî• API: –í—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.post("/unlock")
async def unlock_achievement(request_data: UnlockAchievementRequest, credentials: JwtAuthorizationCredentials = Depends(jwt_access), db: AsyncSession = Depends(get_db)):
    user_id = credentials.subject["user_id"]
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    achievement_id = request_data.achievement_id
    if not achievement_id:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç ID –∞—á–∏–≤–∫–∏!")

    all_achievements = load_achievements()
    achievement = next((a for a in all_achievements if a["id"] == achievement_id), None)

    if not achievement:
        raise HTTPException(status_code=404, detail="–¢–∞–∫–æ–π –∞—á–∏–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∞—á–∏–≤–∫–∞
    result = await db.execute(select(UserAchievement).where(UserAchievement.user_id == user.id, UserAchievement.achievement_id == achievement_id))
    existing_achievement = result.scalar()

    if existing_achievement:
        return JSONResponse(content={"message": "–ê—á–∏–≤–∫–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞!"}, status_code=200)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞—á–∏–≤–∫—É –≤ –ë–î
    new_achievement = UserAchievement(user_id=user.id, achievement_id=achievement_id)
    db.add(new_achievement)
    
    # –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –∞—á–∏–≤–∫—É
    user.xp += achievement.get("reward", 0)

    await db.commit()

    return JSONResponse(content={"success": True, "message": f"–ê—á–∏–≤–∫–∞ '{achievement['name']}' –ø–æ–ª—É—á–µ–Ω–∞!"})

# üî• –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –±–æ—é, —Ç–æ—Ä–≥–æ–≤–ª–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∏ —Ç.–¥.)
async def check_achievements(user_id: int, db: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∞—á–∏–≤–∫–∏ —é–∑–µ—Ä—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å"""
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    if not user:
        return
    
    all_achievements = load_achievements()
    result = await db.execute(select(UserAchievement).where(UserAchievement.user_id == user.id))
    user_achievements = {ach.achievement_id for ach in result.scalars().all()}
    new_achievements = []

    for ach in all_achievements:
        ach_id = ach["id"]
        # –ï—Å–ª–∏ –∞—á–∏–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if ach_id in user_achievements:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã–¥–∞—á–∏ –∞—á–∏–≤–∫–∏
        if ach_id == "first_blood" and user.kills >= 1:
            new_achievements.append(ach)
        elif ach_id == "rich_boi" and user.coins >= 10000:
            new_achievements.append(ach)
        elif ach_id == "chatty_omeg" and user.chat_messages >= 100:
            new_achievements.append(ach)
        elif ach_id == "explorer" and user.visited_locations >= 10:
            new_achievements.append(ach)
        elif ach_id == "omegagod" and user.level >= 100:
            new_achievements.append(ach)

    # –í—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ –∞—á–∏–≤–∫–∏
    for ach in new_achievements:
        db.add(UserAchievement(user_id=user.id, achievement_id=ach["id"]))
        user.xp += ach.get("reward", 0)
        print(f"‚úÖ –ê—á–∏–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {ach['name']} (XP: {ach['reward']})")

    await db.commit()
