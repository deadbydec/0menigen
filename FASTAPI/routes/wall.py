import json
from typing import Optional
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from pydantic import BaseModel
from database import get_db
from sqlalchemy.orm import selectinload
from auth.cookie_auth import get_current_user_from_cookie  # ‚úÖ –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–Ω—É–ª –µ—â—ë
from models.models import User, WallPost

router = APIRouter()

class AddWallPostRequest(BaseModel):
    text: str
    timestamp: Optional[datetime] = None  # –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Ä—É—á–Ω–æ–π time-travel ü§™

class DeleteWallPostRequest(BaseModel):
    index: int
    confirm: Optional[bool] = False  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞ –±—É–¥—É—â–µ–µ)


@router.get("/", response_model=list)
async def get_wall_posts(
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(
        select(User)
        .options(selectinload(User.wall_posts))  # ‚úÖ –∂—ë—Å—Ç–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
        .where(User.id == user.id)
    )
    user = result.scalar()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    posts = user.wall_posts if user.wall_posts else []

    posts_list = [
        {
            "id": post.id,
            "text": post.text,
            "created_at": post.created_at.isoformat() if post.created_at else None
        }
        for post in posts
    ]
    return JSONResponse(content=posts_list, status_code=status.HTTP_200_OK)


# POST /api/wall/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω—É
@router.post("/add")
async def add_wall_post(
    data: AddWallPostRequest,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    if not data.text.strip():
        raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    # user —É–∂–µ –µ—Å—Ç—å, –Ω–∏–∫–∞–∫–∏–µ id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω—ã
    new_post = WallPost(user_id=user.id, text=data.text)
    db.add(new_post)
    await db.commit()

    return JSONResponse(
        content={"success": True, "message": "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!"},
        status_code=status.HTTP_200_OK
    )

# POST /api/wall/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–µ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
@router.post("/delete")
async def delete_wall_post(
    data: DeleteWallPostRequest,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    # üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—à—ë–ª, –Ω–µ –Ω—É–∂–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
    wall = user.get_wall()
    index = data.index

    if index is None or not (0 <= index < len(wall)):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å")

    wall.pop(index)
    user.wall_posts = json.dumps(wall)
    await db.commit()

    return JSONResponse(
        content={"success": True, "message": "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!"},
        status_code=status.HTTP_200_OK
    )
