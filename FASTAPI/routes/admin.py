from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import delete
from database import get_db
from models.models import User

router = APIRouter(prefix="/api/admin", tags=["admin"])

# üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–∂–∏–ø–µ—Ç')
@router.get("/find-users")
async def find_users(q: str, db: AsyncSession = Depends(get_db)):
    result = await db.execute(
        select(User).where(User.username.ilike(f"%{q}%"))
    )
    users = result.scalars().all()
    return [
        {
            "id": user.id,
            "username": user.username,
            "usertype": user.user_type.to_russian() if user.user_type else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            "email": user.email,
            "bio": user.bio,
        }
        for user in users
    ]

# üß® –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
@router.delete("/user/{user_id}")
async def delete_user(user_id: int, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()

    if not user:
        raise HTTPException(status_code=404, detail="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await db.delete(user)
    await db.commit()

    return {"success": True, "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–¥–∞–ª—ë–Ω"}
