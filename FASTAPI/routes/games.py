from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import JSONResponse
from fastapi_jwt import JwtAccessBearer, JwtAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import User, GameScore, Leaderboard
from datetime import datetime

router = APIRouter(prefix="/api/games", tags=["Games"])

jwt_access = JwtAccessBearer(secret_key="supersecretkey")

# üî• –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∏–Ω–∏-–∏–≥—Ä —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –æ—á–∫–æ–≤ –≤ –º–æ–Ω–µ—Ç—ã

@router.post("/save_score")
async def save_game_score(
    game_id: int,
    score: int,
    credentials: JwtAuthorizationCredentials = Depends(jwt_access),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—á–∫–∏ –≤ –º–æ–Ω–µ—Ç—ã."""
    user_id = int(credentials.subject["user_id"])
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—á–∫–æ–≤ –≤ –º–æ–Ω–µ—Ç—ã (1 –º–æ–Ω–µ—Ç–∞ = 100 –æ—á–∫–æ–≤)
    coins_earned = score // 100
    user.coins += coins_earned
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ GameScore
    new_score = GameScore(user_id=user.id, game_id=game_id, score=score, timestamp=datetime.utcnow())
    db.add(new_score)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    leaderboard_result = await db.execute(select(Leaderboard).where(Leaderboard.user_id == user_id, Leaderboard.category == "games"))
    leaderboard_entry = leaderboard_result.scalar()
    
    if leaderboard_entry:
        if score > leaderboard_entry.score:
            leaderboard_entry.score = score
            leaderboard_entry.last_updated = datetime.utcnow()
    else:
        leaderboard_entry = Leaderboard(user_id=user.id, category="games", score=score)
        db.add(leaderboard_entry)
    
    await db.commit()
    
    return JSONResponse(content={"message": "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "coins_earned": coins_earned, "total_coins": user.coins}, status_code=status.HTTP_200_OK)

@router.get("/leaderboard")
async def get_leaderboard(db: AsyncSession = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö."""
    result = await db.execute(
        select(User.username, Leaderboard.score)
        .join(User, User.id == Leaderboard.user_id)
        .where(Leaderboard.category == "games")
        .order_by(Leaderboard.score.desc())
        .limit(10)
    )
    top_players = result.all()
    
    return JSONResponse(content={"leaderboard": [{"username": player[0], "score": player[1]} for player in top_players]}, status_code=status.HTTP_200_OK)