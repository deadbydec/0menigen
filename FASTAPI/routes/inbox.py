from fastapi import APIRouter, HTTPException, Depends, status
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from auth.cookie_auth import get_current_user_from_cookie
from sqlalchemy.future import select
from pydantic import BaseModel
from database import get_db
from datetime import datetime
from sqlalchemy.orm import joinedload

from models.models import PrivateMessage, User, SystemMessage

router = APIRouter()

class SendMessageRequest(BaseModel):
    recipient: str
    subject: str = ""
    content: str


@router.options("/send")
async def options_send():
    return JSONResponse(content={"ok": True})


@router.get("/")
async def get_inbox(
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (PrivateMessage)
    private_result = await db.execute(
        select(PrivateMessage)
        .options(joinedload(PrivateMessage.sender))
        .where(PrivateMessage.recipient_id == user.id)
        .order_by(PrivateMessage.timestamp.desc())
    )
    private_messages = private_result.scalars().all()

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (SystemMessage)
    system_result = await db.execute(
        select(SystemMessage)
        .where(SystemMessage.recipient_id == user.id)
        .order_by(SystemMessage.timestamp.desc())
    )
    system_messages = system_result.scalars().all()

    messages_list = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg in private_messages:
        messages_list.append({
            "id": msg.id,
            "sender": msg.sender.username if msg.sender else None,
            "subject": msg.subject,
            "content": msg.content,
            "timestamp": msg.timestamp.isoformat() if msg.timestamp else None,
            "message_type": "private"
        })

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∞—Ä–∫–æ–≤)
    for sysmsg in system_messages:
        messages_list.append({
            "id": sysmsg.id,
            "sender": "–°–∏—Å—Ç–µ–º–∞",
            "subject": sysmsg.title,
            "content": sysmsg.content,
            "timestamp": sysmsg.timestamp.isoformat() if sysmsg.timestamp else None,
            "message_type": sysmsg.message_type.lower(),  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "gift"
            "related_id": sysmsg.related_id
        })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ timestamp (–æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É)
    messages_list.sort(key=lambda x: x["timestamp"], reverse=True)

    return JSONResponse(content=messages_list, status_code=status.HTTP_200_OK)


# ======================================================================
# API –ò—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ======================================================================
@router.get("/sent")
async def get_sent(user: User = Depends(get_current_user_from_cookie), db: AsyncSession = Depends(get_db)):
    user_id = user.id
    
    result = await db.execute(
        select(PrivateMessage)
        .options(joinedload(PrivateMessage.recipient))
        .where(PrivateMessage.sender_id == user_id)
        .order_by(PrivateMessage.timestamp.desc())
    )
    messages = result.scalars().all()
    
    messages_list = [
        {
            "id": msg.id,
            "recipient": msg.recipient.username if msg.recipient else None,
            "subject": msg.subject,  # üî• –≠–¢–û –ë–´–õ–û –ü–†–û–ü–£–©–ï–ù–û
            "content": msg.content,
            "timestamp": msg.timestamp.isoformat() if msg.timestamp else None
        }
        for msg in messages
    ]
    return JSONResponse(content=messages_list, status_code=status.HTTP_200_OK)

# ======================================================================
# API –û—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
# ======================================================================
@router.post("/send")
async def send_message(
    data: SendMessageRequest,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    if not data.content.strip():
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

    result = await db.execute(select(User).where(User.username == data.recipient))
    recipient = result.scalar()

    if not recipient:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    new_message = PrivateMessage(
        sender_id=user.id,
        recipient_id=recipient.id,
        subject=data.subject,  # ‚Üê –≤–æ—Ç –æ–Ω–æ!
        content=data.content,
        timestamp=datetime.utcnow()
    )
    db.add(new_message)
    await db.commit()

    return JSONResponse(
        content={"success": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", "message_id": new_message.id},
        status_code=status.HTTP_200_OK
    )


# ======================================================================
# API –£–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
# ======================================================================
from auth.cookie_auth import get_current_user_from_cookie

@router.delete("/delete/{message_id}")
async def delete_message(
    message_id: int,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(select(PrivateMessage).where(PrivateMessage.id == message_id))
    message = result.scalar()

    if not message:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —é–∑–µ—Ä ‚Äî –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    if message.recipient_id != user.id and message.sender_id != user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    await db.delete(message)
    await db.commit()

    return JSONResponse(
        content={"success": "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!"},
        status_code=status.HTTP_200_OK
    )

