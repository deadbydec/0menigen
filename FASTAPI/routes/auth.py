from datetime import timedelta, datetime
from fastapi import APIRouter, Depends, HTTPException, Request, Response, Query
from typing import AsyncGenerator
from jose import jwt, JWTError
from sqlalchemy import func
from pydantic import BaseModel, Field
from fastapi.responses import JSONResponse, RedirectResponse
from fastapi_jwt import JwtAccessBearer, JwtAuthorizationCredentials
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from models.models import async_session as _async_session, User, InventoryItem, Product, async_session
import json
from config import Settings, settings
from database import get_db
from utils.confirm_email import send_confirmation_email

jwt_access = JwtAccessBearer(secret_key="supersecretkey", auto_error=True)

router = APIRouter()

async def validation_exception_handler(request, exc):
    print("üìå [DEBUG] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", exc.errors())  # –õ–û–ì–ò–†–£–ï–ú!
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()},
    )

async def some_dependency(local_kw: str = Query("ru")):
    return local_kw

# üî• Pydantic-–º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class UserRegister(BaseModel):
    username: str
    email: str
    password: str
    confirm_password: str = Field(..., alias="confirmPassword")

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞

class UserLogin(BaseModel):
    username: str
    password: str

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register")
async def register(user_data: UserRegister, db: AsyncSession = Depends(get_db)):
    
    print("üìå [DEBUG] –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", user_data.model_dump())  # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if user_data.password != user_data.confirm_password:
        raise HTTPException(status_code=400, detail="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")

    user_data.username = user_data.username.strip().lower()
    existing_user = await db.execute(select(User).where(func.lower(User.username) == user_data.username.lower()))
    if existing_user.scalar():
        raise HTTPException(status_code=409, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    user_data.email = user_data.email.strip().lower()
    existing_email = await db.execute(select(User).where(func.lower(User.email) == user_data.email.lower()))
    if existing_email.scalar():
        raise HTTPException(status_code=409, detail="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")

    try:
        # üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
        new_user = User(
            username=user_data.username,
            email=user_data.email,
            password=generate_password_hash(user_data.password),
            coins=500,
            nullings=0.0,
            level=1,
            xp=0,
            avatar="/api/profile/avatars/default_avatar.png",
            gender="UNKNOWN"
        )
        db.add(new_user)
        await db.flush()  # –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –ø–æ–∫–∞

        # üéÅ –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        starter_names = [
    "–†–∂–∞–≤—ã–π –∫–ª—é—á –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
    "–≠–Ω–µ—Ä–≥–æ—Ñ–ª–µ–∫—Å",
    "–ü–æ—Ç—Ä—ë–ø–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç–∫–∞ –Ω–æ–≤–∏—á–∫—É"
]
        result = await db.execute(select(Product).where(Product.name.in_(starter_names)))
        starter_products = result.scalars().all()

        if not starter_products:
            raise HTTPException(status_code=500, detail="–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")

        for product in starter_products:
            item = InventoryItem(
                user_id=new_user.id,
                product_id=product.id,
                quantity=1
            )
            db.add(item)

            # ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        #await send_confirmation_email(
            #user=new_user,
            #db=db,
            #base_url="https://localhost:5002/api"  # ‚Üê –∏–ª–∏ —Ç–≤–æ–π –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å –ø–æ–∑–∂–µ
        #)

        await db.commit()  # ‚úÖ –û–¥–∏–Ω —Ä–∞–∑ ‚Äî –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        return {"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º."}

    except Exception as e:
        await db.rollback()  # ‚ùå –û—Ç–∫–∞—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚úÖ –õ–æ–≥–∏–Ω
# ‚úÖ –õ–û–ì–ò–ù (–∑–∞–º–µ–Ω–∏–ª–∏ AuthJWT –Ω–∞ fastapi-jwt)
@router.post("/login")
async def login(user_data: UserLogin, request: Request, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).where(User.username == user_data.username))
    user = result.scalar()

    if not user or not check_password_hash(user.password, user_data.password):
        raise HTTPException(status_code=401, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

    # ‚õìÔ∏è –°–û–ó–î–ê–Å–ú –¢–û–ö–ï–ù –°–ê–ú–ò
    access_payload = {
        "sub": str(user.id),
        "type": "access",
        "exp": datetime.utcnow() + timedelta(minutes=60),
        "iat": datetime.utcnow(),
    }

    csrf_payload = {
        "sub": str(user.id),
        "type": "csrf",
        "exp": datetime.utcnow() + timedelta(minutes=10),
        "iat": datetime.utcnow(),
    }

    access_token = jwt.encode(access_payload, settings.JWT_SECRET_KEY, algorithm="HS256")
    csrf_token = jwt.encode(csrf_payload, settings.JWT_SECRET_KEY, algorithm="HS256")

    response = Response(
        content=json.dumps({"msg": "Login successful"}),
        status_code=200,
        media_type="application/json"
    )

    response.set_cookie(
        key="access_token_cookie",
        value=access_token,
        httponly=True,
        secure=True,
        samesite="None",
    )
    response.set_cookie(
        key="csrf_access_token",
        value=csrf_token,
        secure=True,
        samesite="None",
    )

    return response

# ‚úÖ –õ–æ–≥–∞—É—Ç (—Ä–µ–≤–æ–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞)
@router.post("/logout")
async def logout():
    resp = JSONResponse({"msg": "logged out"})
    # –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ —Ç—ã —Å—Ç–∞–≤–∏—à—å secure=True, samesite="None"
    resp.delete_cookie(
        "access_token_cookie",
        secure=True,
        samesite="None",
        path="/",               # —Ç–∞–∫–∏–µ –∂–µ!
    )
    resp.delete_cookie(
        "csrf_access_token",
        secure=True,
        samesite="None",
        path="/",
    )
    return resp


