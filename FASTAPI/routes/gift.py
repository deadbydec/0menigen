from datetime import datetime
from fastapi import APIRouter, Depends, Request, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import InventoryItem, Product, ProductType, User, PendingGift, SystemMessage, SystemMessageType
from auth.cookie_auth import get_current_user_from_cookie
from pydantic import BaseModel
from sqlalchemy.orm import selectinload

router = APIRouter(prefix="/api/gift", tags=["gift"])

class GiftRequest(BaseModel):
    recipient_username: str
    quantity: int = 1  # üí• –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞—Ä–∏–º 1 —à—Ç

class GiftResponse(BaseModel):
    success: bool
    message: str


@router.post("/{item_id}")
async def gift_item(
    item_id: int,
    data: GiftRequest,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    try:
        print(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç: {user.username}, item_id: {item_id}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {data.recipient_username}")

        result = await db.execute(
    select(InventoryItem)
    .where(InventoryItem.id == item_id)
    .options(selectinload(InventoryItem.product))
)
        item = result.scalar()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item}")

        if not item or item.user_id != user.id:
            raise HTTPException(status_code=403, detail="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç")

        result = await db.execute(select(User).where(User.username == data.recipient_username))
        recipient = result.scalar()
        print(f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {recipient}")

        if not recipient:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        gift = PendingGift(sender_id=user.id, recipient_id=recipient.id, item_id=item.id)
        db.add(gift)

        await db.flush()  # üëà —á—Ç–æ–± —É gift –±—ã–ª id
        print(f"üßæ PendingGift —Å–æ–∑–¥–∞–Ω —Å id={gift.id}")

        system_msg = SystemMessage(
            recipient_id=recipient.id,
            message_type=SystemMessageType.GIFT.value,
            title="üéÅ –í–∞–º –ø–æ–¥–∞—Ä–æ–∫!",
            content=f"–ò–≥—Ä–æ–∫ {user.username} –ø—Ä–∏—Å–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç: {item.product.name}.",
            timestamp=datetime.utcnow(),
            is_read=False,
            related_id=gift.id
        )
        db.add(system_msg)

        await db.commit()

        return {"success": True, "message": "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"}

    except Exception as e:
        print(f"‚ùå [GIFT ERROR]: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞")



@router.post("/accept/{gift_id}")
async def accept_gift(
    gift_id: int,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(
        select(PendingGift)
        .options(
            selectinload(PendingGift.item).selectinload(InventoryItem.product)
        )
        .where(PendingGift.id == gift_id)
    )
    gift = result.scalar()

    if not gift or gift.recipient_id != user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫—É")

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    result = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == user.id,
            InventoryItem.product_id == gift.item.product_id
        )
    )
    existing_item = result.scalar()

    if existing_item:
        existing_item.quantity += gift.item.quantity
        await db.delete(gift.item)  # —É–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–∞—Ä–∫–∞
    else:
        gift.item.user_id = user.id

    system_msg = SystemMessage(
        recipient_id=gift.sender_id,
        message_type=SystemMessageType.GIFT.value,
        title="üéÅ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç",
        content=f"–ò–≥—Ä–æ–∫ {user.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫: {gift.item.product.name}.",
        timestamp=datetime.utcnow(),
        is_read=False,
        related_id=gift.id
    )
    db.add(system_msg)

    await db.delete(gift)
    await db.commit()

    return {"success": True, "message": "–ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç!"}


@router.post("/reject/{gift_id}")
async def reject_gift(
    gift_id: int,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(
    select(PendingGift)
    .options(
        selectinload(PendingGift.item).selectinload(InventoryItem.product)
    )
    .where(PendingGift.id == gift_id)
)

    gift = result.scalar()

    if not gift or gift.recipient_id != user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫—É")

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    result = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == gift.sender_id,
            InventoryItem.product_id == gift.item.product_id
        )
    )
    existing_item = result.scalar()

    if existing_item:
        existing_item.quantity += gift.item.quantity
        await db.delete(gift.item)
    else:
        gift.item.user_id = gift.sender_id

    # ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–∫—É –¥–∞—Ä–∏—Ç–µ–ª—é
    system_msg = SystemMessage(
        recipient_id=gift.sender_id,
        message_type=SystemMessageType.GIFT.value,
        title="üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω",
        content=f"–ò–≥—Ä–æ–∫ {user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫: {gift.item.product.name}. –ü—Ä–µ–¥–º–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤–∞–º.",
        timestamp=datetime.utcnow(),
        is_read=False,
        related_id=gift.id
    )
    db.add(system_msg)

    await db.delete(gift)
    await db.commit()

    return {"success": True, "message": "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é!"}