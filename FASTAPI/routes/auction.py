# routes/auction.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import and_
from datetime import datetime, timedelta, timezone
from pydantic import BaseModel, field_validator

from models.models import User, InventoryItem, Pet, AuctionLot, AuctionBid
from auth.cookie_auth import get_current_user_from_cookie
from database import get_db
from pydantic import BaseModel, Field
from typing import Literal
from sqlalchemy import or_
from sqlalchemy.orm import joinedload
from fastapi import Body

router = APIRouter(prefix="/api/auction", tags=["Auction"])

STATIC_URL = "https://localhost:5002"  # –∏–ª–∏ —Ç–≤–æ–π —Ö–æ—Å—Ç–∏–Ω–≥

class AuctionCreateRequest(BaseModel):
    item_type: Literal["item", "pet"] = Field(..., description="–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: item –∏–ª–∏ pet")
    item_id: int
    currency: Literal["coins", "nullings"] = Field(..., description="–¢–∏–ø –≤–∞–ª—é—Ç—ã: coins –∏–ª–∏ nullings")
    min_price: float = Field(..., gt=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    duration_hours: float = Field(..., ge=0.25, le=168, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —á–∞—Å–∞—Ö (0.5 = 30 –º–∏–Ω—É—Ç)")

    @field_validator("duration_hours", mode="before")
    @classmethod
    def round_to_15_min(cls, v):
        try:
            v = float(v)
        except:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤")
        if v < 0.25:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 15 –º–∏–Ω—É—Ç (0.25 —á–∞—Å–∞)")
        return round(v * 4) / 4  # ‚è±Ô∏è —à–∞–≥ 15 –º–∏–Ω—É—Ç


    @field_validator("min_price", mode="after")
    @classmethod
    def validate_min_price(cls, v, info):
        currency = info.data.get("currency")
        if currency == "coins":
            if v < 500:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –º–æ–Ω–µ—Ç—ã ‚Äî 500")
            if not float(v).is_integer():
                raise ValueError("–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return int(v)
        elif currency == "nullings":
            if v < 0.10:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ –Ω—É–ª–ª–∏–Ω–≥–∏ ‚Äî 0.10")
            return round(v, 2)
        return v


from sqlalchemy import select, func
from sqlalchemy.orm import joinedload
from datetime import datetime, timezone

@router.get("/", summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã")
async def get_all_active_auctions(
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)  # üÜï
):
    now = datetime.now(timezone.utc)

    result = await db.execute(
        select(AuctionLot)
        .options(
            joinedload(AuctionLot.owner),
            joinedload(AuctionLot.highest_bidder)
        )
        .where(
            AuctionLot.is_active == True,
            AuctionLot.expires_at > now
        )
        .order_by(AuctionLot.expires_at.asc())
    )
    lots = result.scalars().all()

    out = []

    for lot in lots:
        # üî¢ –∫–æ–ª-–≤–æ —Å—Ç–∞–≤–æ–∫
        count_res = await db.execute(
            select(func.count()).select_from(AuctionBid).where(AuctionBid.auction_id == lot.id)
        )
        bid_count = count_res.scalar_one()

        lot_data = {
            "id": lot.id,
            "item_type": lot.item_type,
            "item_id": lot.item_id,
            "currency": lot.currency,
            "starting_price": float(lot.starting_price),
            "current_bid": float(lot.current_bid or 0),
            "expires_at": lot.expires_at.isoformat(),
            "owner_id": lot.owner_id,
            "owner_name": lot.owner.username if lot.owner else "???",
            "highest_bidder_name": lot.highest_bidder.username if lot.highest_bidder else None,
            "bid_count": bid_count,
            "name": None,
            "image": None,
            "avatar_layers": None
        }

        if lot.item_type == "item":
            item_result = await db.execute(
                select(InventoryItem).options(joinedload(InventoryItem.product)).where(InventoryItem.id == lot.item_id)
            )
            item = item_result.scalar_one_or_none()
            if item and item.product:
                lot_data["name"] = item.product.name
                lot_data["image"] = f"/static/goods/{item.product.image}" if item.product.image else "/static/goods/noimage.png"

        elif lot.item_type == "pet":
            pet_result = await db.execute(select(Pet).where(Pet.id == lot.item_id))
            pet = pet_result.scalar_one_or_none()
            if pet:
                lot_data["name"] = pet.name or f"–ü–∏—Ç–æ–º–µ—Ü #{pet.id}"
                lot_data["avatar_layers"] = pet.avatar_layers or []

        out.append(lot_data)

    return {"lots": out, "user_id": user.id}



@router.post("/create")
async def create_auction_lot(
    data: AuctionCreateRequest,
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db),
):
    now = datetime.now(timezone.utc)

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–ª–∞–¥–µ–ª–µ—Ü
    if data.item_type == "item":
        result = await db.execute(
            select(InventoryItem)
            .options(joinedload(InventoryItem.product))  # ü©π –≤–æ—Ç —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
            .where(
                and_(
                    InventoryItem.id == data.item_id,
                    InventoryItem.user_id == user.id,
                    or_(
                        InventoryItem.state == None,
                        InventoryItem.state.notin_(["equipped", "safe", "locked"])
            )
        )
    )
)
        

        item = result.scalar_one_or_none()
        if not item:
            raise HTTPException(status_code=404, detail="–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        FORBIDDEN_RARITIES = {"trash", "frequent", "common", "unique"}

    if item.product.non_tradeable or item.product.rarity in FORBIDDEN_RARITIES:
        raise HTTPException(status_code=400, detail="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω")


    elif data.item_type == "pet":
        result = await db.execute(
            select(Pet).where(
                and_(
                    Pet.id == data.item_id,
                    Pet.user_id == user.id,
                    or_(
    Pet.state == None,
    Pet.state == "normal"
)
                )
            )
        )
        item = result.scalar_one_or_none()
        if not item:
            raise HTTPException(status_code=404, detail="–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        if item.non_tradeable or item.rarity == "unique":
            raise HTTPException(status_code=400, detail="–≠—Ç–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω")


    # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞
    expires_at = now + timedelta(hours=data.duration_hours)

    new_lot = AuctionLot(
        owner_id=user.id,
        item_type=data.item_type,
        item_id=data.item_id,
        currency=data.currency,
        starting_price=data.min_price,
        expires_at=expires_at,
        is_active=True,
        created_at=now
    )

    db.add(new_lot)
    # üõ°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞/–ø–∏—Ç–æ–º—Ü–∞
    item.state = "auction"
    await db.commit()

    return {
        "success": True,
        "lot_id": new_lot.id,
        "expires_at": expires_at.isoformat(),
        "message": "–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω"
    }


class BidRequest(BaseModel):
    lot_id: int = Field(..., gt=0)
    amount: float = Field(..., gt=0)

@router.post("/bid", summary="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")
async def place_bid(
    data: BidRequest = Body(...),
    user: User = Depends(get_current_user_from_cookie),
    db: AsyncSession = Depends(get_db)
):
    now = datetime.now(timezone.utc)

    # 1. –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π SELECT FOR UPDATE
    result = await db.execute(
        select(AuctionLot)
        .where(
            AuctionLot.id == data.lot_id,
            AuctionLot.is_active == True,
            AuctionLot.expires_at > now
        )
        .with_for_update()
    )
    lot = result.scalar_one_or_none()
    if not lot:
        raise HTTPException(status_code=404, detail="–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")

    # 2. –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å—Ç–∞–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ
    if lot.owner_id == user.id:
        raise HTTPException(status_code=403, detail="–ù–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–≤–æ–π –ª–æ—Ç")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    if lot.current_bid is None:
        if data.amount < lot.starting_price:
            raise HTTPException(
                status_code=400,
                detail=f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({lot.starting_price})"
            )
    else:
        if data.amount <= lot.current_bid:
            raise HTTPException(
                status_code=400,
                detail=f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π ({lot.current_bid})"
            )

    user = await db.merge(user)

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —É –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if lot.currency == "coins":
        if user.coins < data.amount:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏")
        user.coins -= int(data.amount)
    elif lot.currency == "nullings":
        if user.nullings < data.amount:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–ª–ª–∏–Ω–≥–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
        user.nullings -= round(float(data.amount), 2)

    # 5. –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–≥—Ä–æ–∫—É (–µ—Å–ª–∏ –±—ã–ª)
    if lot.highest_bidder_id and lot.highest_bidder_id != user.id:
        prev_result = await db.execute(
            select(User).where(User.id == lot.highest_bidder_id)
        )
        prev_user = prev_result.scalar_one_or_none()
        if prev_user:
            if lot.currency == "coins":
                prev_user.coins += int(lot.current_bid)
            elif lot.currency == "nullings":
                prev_user.nullings += round(float(lot.current_bid), 2)

    # 6. –°–æ–∑–¥–∞—ë–º —Å—Ç–∞–≤–∫—É
    bid = AuctionBid(
        auction_id=lot.id,
        bidder_id=user.id,
        amount=data.amount,
        created_at=now
    )
    db.add(bid)

    # 7. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç
    lot.current_bid = data.amount
    lot.highest_bidder_id = user.id

    await db.commit()
    return {"success": True, "message": "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"}

