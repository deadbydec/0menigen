from fastapi import APIRouter, Depends, Request, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import InventoryItem, Product, ProductType, User
from auth.cookie_auth import get_current_user_from_cookie
from sqlalchemy.orm import selectinload
from typing import Optional
from fastapi.responses import JSONResponse

router = APIRouter(prefix="/api/inventory", tags=["inventory"])

from pydantic import BaseModel

class GiftPayload(BaseModel):
    recipient_id: int
    quantity: int = 1


@router.get("/")
async def get_inventory(
    request: Request,
    db: AsyncSession = Depends(get_db),
    user: Optional[User] = Depends(get_current_user_from_cookie),
):
    # CORS preflight fallback
    if request.method == "OPTIONS" or not user:
        print("üîÅ [INFO] Preflight –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —é–∑–µ—Ä ‚Äî –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        return JSONResponse(status_code=204, content={})
    
    if not user:
        return JSONResponse(status_code=401, content={"detail": "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})

    print("üß† [DEBUG] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä:", user.id)
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫—É–∫–∏."""
    result = await db.execute(
        select(InventoryItem)
        .where(InventoryItem.user_id == user.id)
        .options(selectinload(InventoryItem.product))
)
    inventory = result.scalars().all()

    print("üì¶ [DEBUG] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", len(inventory))

    inventory_list = []
    for item in inventory:
        if not item.product:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç {item.id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        inventory_list.append({
            "id": item.id,
            "name": item.product.name,
            "type": item.product.product_type.value,
            "image": item.product.image,
            "rarity": item.product.rarity.value,
            "quantity": item.quantity,
            "product": {
                "name": item.product.name,
                "image": item.product.image,
                "description": item.product.description,
                "rarity": item.product.rarity.value,
                "product_type": item.product.product_type.value,
            }
        })

    return {"inventory": inventory_list}


@router.post("/{item_id}")
async def gift_item(
    item_id: int,
    payload: GiftPayload,
    request: Request,
    db: AsyncSession = Depends(get_db),
    sender: User = Depends(get_current_user_from_cookie)
):
    recipient_id = payload.recipient_id
    quantity = payload.quantity

    if not recipient_id or recipient_id == sender.id:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å —Å–µ–±–µ –∏–ª–∏ –Ω–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É.")

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    result = await db.execute(
    select(InventoryItem)
    .where(InventoryItem.id == item_id, InventoryItem.user_id == sender.id)
    .options(selectinload(InventoryItem.product))
)
    sender_item = result.scalar()
    if not sender_item or sender_item.quantity < quantity:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.")

    # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    result = await db.execute(select(User).where(User.id == recipient_id))
    recipient = result.scalar()
    if not recipient:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    result = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == recipient.id,
            InventoryItem.product_id == sender_item.product_id
        )
    )
    recipient_item = result.scalar()

    if recipient_item:
        recipient_item.quantity += quantity
    else:
        new_item = InventoryItem(
            user_id=recipient.id,
            product_id=sender_item.product_id,
            quantity=quantity
        )
        db.add(new_item)

    # –£–º–µ–Ω—å—à–∞–µ–º —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_item.quantity -= quantity
    if sender_item.quantity <= 0:
        await db.delete(sender_item)

    await db.commit()

    return {
        "success": True,
        "message": f"–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏ {quantity}x '{sender_item.product.name}' –∏–≥—Ä–æ–∫—É {recipient.username}."
    }


# üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
@router.post("/use/{item_id}")
async def use_item(
    item_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—á–µ—Ä–µ–∑ –∫—É–∫–∏-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"""
    result = await db.execute(
    select(InventoryItem)
    .where(InventoryItem.id == item_id)
    .options(selectinload(InventoryItem.product))
)
    item = result.scalar()

    if not item or item.user_id != user.id:
        raise HTTPException(status_code=403, detail="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!")

    product = item.product
    response = {"success": True, "message": f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {product.name}!"}

    # –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if product.product_type == ProductType.drink:
        xp_reward = 10
        user.add_xp(xp_reward)
        response["message"] = f"–í—ã –≤—ã–ø–∏–ª–∏ {product.name} –∏ –ø–æ–ª—É—á–∏–ª–∏ {xp_reward} XP!"
    elif product.product_type == ProductType.food:
        health_restore = 20
        user.health = getattr(user, 'health', 100) + health_restore
        response["message"] = f"–í—ã –ø–æ–µ–ª–∏ {product.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {health_restore} –∑–¥–æ—Ä–æ–≤—å—è!"
    elif product.product_type == ProductType.artifact:
        response["message"] = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç {product.name} –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!"
    elif product.product_type == ProductType.collectible:
        response["message"] = f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {product.name} –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!"

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª—è–µ–º
    if item.quantity > 1:
        item.quantity -= 1
    else:
        await db.delete(item)

    await db.commit()
    return response

# üî• –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
@router.delete("/destroy/{item_id}")
async def destroy_item(
    item_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—á–µ—Ä–µ–∑ –∫—É–∫–∏-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"""
    result = await db.execute(
    select(InventoryItem)
    .where(InventoryItem.id == item_id)
    .options(selectinload(InventoryItem.product))
)
    inventory_item = result.scalar()

    if not inventory_item or inventory_item.user_id != user.id:
        raise HTTPException(status_code=403, detail="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!")

    item_name = inventory_item.product.name
    await db.delete(inventory_item)
    await db.commit()

    return {"success": True, "message": f"–ü—Ä–µ–¥–º–µ—Ç {item_name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!"}




