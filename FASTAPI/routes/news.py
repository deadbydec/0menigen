import json
import os
from datetime import datetime
from fastapi import APIRouter, HTTPException, status, Query, Body, Request, Depends
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from config import Config
from auth.cookie_auth import get_current_user_from_cookie

router = APIRouter()

# üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
def load_news():
    try:
        with open(Config.NEWS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
def save_news(news_list):
    with open(Config.NEWS_FILE, "w", encoding="utf-8") as file:
        json.dump(news_list, file, ensure_ascii=False, indent=4)

# üîç –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
def get_sorted_news(category: str = None):
    news_list = load_news()
    try:
        sorted_news = sorted(
            news_list,
            key=lambda x: datetime.strptime(x["date"], "%Y-%m-%d"),
            reverse=True
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π"
        )
    
    if category and category != "–í—Å–µ":
        sorted_news = [news for news in sorted_news if news["category"] == category]
    
    return sorted_news

# ‚úÖ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.get("/", response_model=list)
async def get_news(
    request: Request,
    user = Depends(get_current_user_from_cookie),
    category: str = Query(default=None)
):
    if not user:
        print("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω —Å–ª–æ–º–∞–Ω")
        raise HTTPException(status_code=401, detail="–ö–∞—Ä–º–∏–∫ –ö–æ–∞–ª–∞: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å –∫—É–∫–æ–π")

    print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —é–∑–µ—Ä: {user.username}")
    return get_sorted_news(category)



# üî• API –¥–ª—è –ª–∞–π–∫–æ–≤
@router.post("/{news_id}/like")
def like_news(news_id: int):
    news_list = load_news()
    news_item = None
    for news in news_list:
        if news["id"] == news_id:
            news["likes"] += 1
            news_item = news
            break
    if news_item is None:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    save_news(news_list)
    return {"status": "success", "likes": news_item["likes"]}

# –ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
class CommentRequest(BaseModel):
    author: str = "–ê–Ω–æ–Ω–∏–º"
    text: str

# üí¨ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–æ–≤–æ—Å—Ç–∏
@router.post("/{news_id}/comment")
def add_comment(news_id: int, comment: CommentRequest):
    if not comment.text.strip():
        raise HTTPException(status_code=400, detail="–ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    
    news_list = load_news()
    news_item = None
    for news in news_list:
        if news["id"] == news_id:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
            if "comments" not in news:
                news["comments"] = []
            news["comments"].append({"author": comment.author, "text": comment.text})
            news_item = news
            break
    if news_item is None:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    save_news(news_list)
    return {"status": "success", "comments": news_item.get("comments", [])}
