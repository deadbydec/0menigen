from fastapi import APIRouter, Request, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import and_, update
from datetime import datetime, timedelta
import random

from database import get_db
from auth.cookie_auth import get_token_from_cookie, decode_access_token
from models.models import User, ToiletDoom, ToiletCooldown, ToiletVote

router = APIRouter(prefix="/api/toilet-doom", tags=["toilet"])

# üîß –ü–∞–º—è—Ç–∫–∞ –ª—É—Ç–∞
LOOT_TABLE = [
    {"item": "–ó–∞–º—ã–∑–≥–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –≥—É–±–∫–∏", "chance": 0.4, "effect": "vomit"},
    {"item": "–û–±—Ä–µ–∑–æ–∫ –≥–∞–∑–µ—Ç—ã —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ñ—Ä–∞–∑–æ–π", "chance": 0.2},
    {"item": "–°–ª–æ–º–∞–Ω–Ω—ã–π –Ω—É–ª–ª–∏–Ω–≥", "chance": 0.1},
    {"item": "–ü—É—Å—Ç–æ...", "chance": 0.2398},
    {"item": "\u2728 –¶–ï–õ–´–ô –ù–£–õ–õ–ò–ù–ì \u2728", "chance": 0.0002, "value": 1.0},
]

def roll_loot():
    roll = random.random()
    cumulative = 0
    for entry in LOOT_TABLE:
        cumulative += entry["chance"]
        if roll <= cumulative:
            return entry
    return {"item": "–ü—É—Å—Ç–æ..."}

@router.get("/")
async def enter_toilet(request: Request, db: AsyncSession = Depends(get_db)):
    token = get_token_from_cookie(request)
    payload = decode_access_token(token)
    user_id = int(payload.get("sub"))

    result = await db.execute(select(ToiletDoom).where(ToiletDoom.user_id == user_id))
    toilet = result.scalar()

    if not toilet:
        toilet = ToiletDoom(user_id=user_id)
        db.add(toilet)
        await db.commit()
        await db.refresh(toilet)

    toilet.last_visit = datetime.utcnow()
    await db.commit()

    message = "\ud83e\uddd8 –¢—ã —Å–∏–¥–∏—à—å –≤ —Ç–∏—à–∏–Ω–µ. –î–∂–∏–ø–µ—Ç–∏ —à–µ–ø—á–µ—Ç: '–¢—ã –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—à—å... –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.'"
    if not toilet.clean:
        message += " \ud83d\udca9 –ó–¥–µ—Å—å —Å—Ç—Ä–∞–Ω–Ω–æ –ø–∞—Ö–Ω–µ—Ç. –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –ø—Ä–∏–±—Ä–∞—Ç—å—Å—è?"

    return {
        "message": message,
        "toiletClean": toilet.clean,
        "lastVisit": toilet.last_visit.isoformat(),
    }

@router.post("/clean")
async def clean_toilet(request: Request, db: AsyncSession = Depends(get_db)):
    token = get_token_from_cookie(request)
    payload = decode_access_token(token)
    user_id = int(payload.get("sub"))

    result = await db.execute(select(ToiletDoom).where(ToiletDoom.user_id == user_id))
    toilet = result.scalar()
    if not toilet:
        raise HTTPException(status_code=404, detail="Toilet Doom –Ω–µ –Ω–∞–π–¥–µ–Ω")

    toilet.clean = True
    await db.commit()

    return {"message": "\ud83e\uddfa –¢—ã –Ω–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫ –≤ Toilet Doom. –¢–µ–ø–µ—Ä—å —Ç—É—Ç —á–∏—Å—Ç–æ –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ."}

@router.post("/look-around/{target_user_id}")
async def look_around(request: Request, target_user_id: int, db: AsyncSession = Depends(get_db)):
    token = get_token_from_cookie(request)
    payload = decode_access_token(token)
    user_id = int(payload.get("sub"))

    if user_id == target_user_id:
        raise HTTPException(status_code=400, detail="–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ä—ã—Ç—å—Å—è –≤ —Å–≤–æ—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º Doom'–µ!")

    cooldown_query = await db.execute(
        select(ToiletCooldown).where(
            and_(ToiletCooldown.user_id == user_id, ToiletCooldown.target_id == target_user_id)
        )
    )
    cooldown = cooldown_query.scalar()
    now = datetime.utcnow()

    if cooldown and cooldown.next_available > now:
        raise HTTPException(status_code=429, detail="–ö—É–ª–¥–∞—É–Ω: –ø–æ–¥–æ–∂–¥–∏ 12 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Å–º–æ—Ç—Ä–æ–º —ç—Ç–æ–≥–æ —Ç—É–∞–ª–µ—Ç–∞.")

    loot = roll_loot()

    if cooldown:
        cooldown.next_available = now + timedelta(hours=12)
    else:
        db.add(ToiletCooldown(
            user_id=user_id,
            target_id=target_user_id,
            next_available=now + timedelta(hours=12)
        ))

    await db.commit()

    result = await db.execute(select(User).where(User.id == target_user_id))
    target_user = result.scalar()

    return {
        "message": f"–¢—ã –æ—Å–º–æ—Ç—Ä–µ–ª—Å—è –≤ —Ç—É–∞–ª–µ—Ç–µ {target_user.username} –∏ –Ω–∞—à—ë–ª: {loot['item']}",
        "loot": loot
    }

@router.post("/like/{target_user_id}")
async def like_toilet(request: Request, target_user_id: int, db: AsyncSession = Depends(get_db)):
    token = get_token_from_cookie(request)
    payload = decode_access_token(token)
    user_id = int(payload.get("sub"))

    vote_query = await db.execute(
        select(ToiletVote).where(and_(
            ToiletVote.user_id == user_id,
            ToiletVote.target_id == target_user_id
        ))
    )
    existing_vote = vote_query.scalar()

    if existing_vote:
        existing_vote.vote_type = "like"
    else:
        db.add(ToiletVote(user_id=user_id, target_id=target_user_id, vote_type="like"))

    await db.commit()
    return {"message": "\ud83d\udc4d –¢—ã –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ—Ç —Ç—É–∞–ª–µ—Ç."}

@router.post("/dislike/{target_user_id}")
async def dislike_toilet(request: Request, target_user_id: int, db: AsyncSession = Depends(get_db)):
    token = get_token_from_cookie(request)
    payload = decode_access_token(token)
    user_id = int(payload.get("sub"))

    vote_query = await db.execute(
        select(ToiletVote).where(and_(
            ToiletVote.user_id == user_id,
            ToiletVote.target_id == target_user_id
        ))
    )
    existing_vote = vote_query.scalar()

    if existing_vote:
        existing_vote.vote_type = "dislike"
    else:
        db.add(ToiletVote(user_id=user_id, target_user_id=target_user_id, vote_type="dislike"))

    await db.commit()
    return {"message": "\ud83d\udc4e –¢—ã –¥–∏–∑–ª–∞–π–∫–Ω—É–ª —ç—Ç–æ—Ç —Ç—É–∞–ª–µ—Ç."}

