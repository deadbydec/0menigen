from datetime import datetime, date
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import LandfillItem, InventoryItem, Product, User, LandfillPickupLimit, VipStatus
from auth.cookie_auth import get_current_user_from_cookie

router = APIRouter(prefix="/api/landfill", tags=["landfill"])

@router.get("/")
async def view_landfill(db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(LandfillItem).where(LandfillItem.quantity > 0))
    items = result.scalars().all()

    return [
        {
            "id": item.id,
            "name": item.product.name,
            "image": item.product.image,
            "description": item.product.description,
            "quantity": item.quantity,
            "rarity": item.product.rarity.value,
            "product_type": item.product.product_type.value,
            "thrown_at": item.thrown_at.isoformat(),
        } for item in items
    ]


@router.post("/pickup/{landfill_id}")
async def pickup_item(
    landfill_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    today = date.today()

    # üåå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—É –∏–≥—Ä–æ–∫–∞
    user_race = (user.race.name.lower() if user.race and user.race.name else "")

# üì¶ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–±–æ—Ä–∞ –Ω–∞ —Å–≤–∞–ª–∫–µ
    if user.vip_status in [VipStatus.CRYPTOVOID, VipStatus.NULLOVERLORD]:
        daily_limit = 7  # üõ°Ô∏è VIP –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ‚Äî —ç–ª–∏—Ç–∞ —Å—Ä–µ–¥–∏ –º—É—Å–æ—Ä—â–∏–∫–æ–≤
    elif user_race == "–Ω–∞–ª–ª–≤—É—Ä":
        daily_limit = 5  # üëÅÔ∏è –ù–∞–ª–ª–≤—É—Ä —É–º–µ—é—Ç –º–∏–º–∏–∫—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≥—É–ª–µ–π
    else:
        daily_limit = 3  # üßç –û–±—ã—á–Ω—ã–µ —Å–º–µ—Ä—Ç–Ω—ã–µ

# üìÖ –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    result = await db.execute(
        select(LandfillPickupLimit).where(
            LandfillPickupLimit.user_id == user.id,
            LandfillPickupLimit.date == today
        )
    )
    limit = result.scalar()

# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    if limit and limit.count >= daily_limit:
        if user.vip_status == VipStatus.NULLOVERLORD:
            detail = "–í—ã —É–∂–µ —É–Ω–∏–∑–∏–ª–∏ –≤—Å–µ—Ö –±–æ–º–∂–µ–π —Å–µ–≥–æ–¥–Ω—è. –û–º–µ–≥–∞-–±–æ–º–∂–∏ –ø–æ–∫–æ—Ä–Ω–æ –æ—Ç—Å—Ç—É–ø–∏–ª–∏."
        elif user_race == "–Ω–∞–ª–ª–≤—É—Ä":
            detail = "–ì—É–ª–∏ —Ç–æ–∂–µ —É—Å—Ç–∞—é—Ç. –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫–∏–Ω—É—Ç—å—Å—è –±–æ–º–∂–æ–º."
        else:
            detail = "–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ —à–∞—Ä–∏—Ç–µ—Å—å –ø–æ —Å–≤–∞–ª–∫–µ. –û–º–µ–≥–∞-–±–æ–º–∂–∏ –≤–∞—Å –∑–∞–º–µ—Ç–∏–ª–∏ –∏ –¥–∞–ª–∏ –ª–µ—â–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."

        raise HTTPException(status_code=429, detail=detail)

    result = await db.execute(select(LandfillItem).where(LandfillItem.id == landfill_id))
    item = result.scalar()

    if not item or item.quantity <= 0:
        raise HTTPException(status_code=404, detail="–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—Ç–æ-—Ç–æ –ø–æ–¥–æ–±—Ä–∞–ª –∏–ª–∏ –æ–Ω –∏—Å—á–µ–∑.")

    # –û–±–Ω–æ–≤–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    result = await db.execute(select(InventoryItem).where(
        InventoryItem.user_id == user.id,
        InventoryItem.product_id == item.product_id
    ))
    inv_item = result.scalar()

    if inv_item:
        inv_item.quantity += item.quantity
    else:
        db.add(InventoryItem(user_id=user.id, product_id=item.product_id, quantity=item.quantity))

    # –£–¥–∞–ª—è–µ–º —Å–æ —Å–≤–∞–ª–∫–∏
    await db.delete(item)

    # –û–±–Ω–æ–≤–∏–º –ª–∏–º–∏—Ç
    if limit:
        limit.count += 1
    else:
        db.add(LandfillPickupLimit(user_id=user.id, date=today, count=1))

    await db.commit()

    return {"message": f"–í—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ {item.quantity}x {item.product.name} —Å–æ —Å–≤–∞–ª–∫–∏!"}


