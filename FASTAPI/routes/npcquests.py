# routes/npc_quests.py

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from pydantic import BaseModel
from datetime import datetime, timedelta
from typing import Optional
import random
import json

from database import get_db
from auth.cookie_auth import get_current_user_from_cookie
from models.models import DailyQuest, InventoryItem, User  # ‚úÖ –£–±–µ–¥–∏—Å—å, —á—Ç–æ User –µ—Å—Ç—å –≤ models
from utils.quests_tools import pick_random_item_from_store  # ‚úÖ —ç—Ç–æ —Ç–≤–æ—è —É—Ç–∏–ª—å-—Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤—å –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç

router = APIRouter(prefix="/api/npc-quests", tags=["NPC Quests"])


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  POST /npc-quests/ ‚Äî —Å–æ–∑–¥–∞—Ç—å –¥–µ–π–ª–∏–∫–∏ –æ—Ç –≤—Å–µ—Ö NPC
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.post("/", summary="–°–æ–∑–¥–∞—Ç—å –¥–µ–π–ª–∏–∫–∏ –æ—Ç –≤—Å–µ—Ö NPC")
async def create_npc_quests(user=Depends(get_current_user_from_cookie),
                            db: AsyncSession = Depends(get_db)):
    now = datetime.utcnow()

    with open("data/npcs.json", "r", encoding="utf-8") as f:
        npc_list = json.load(f)

    new_quests = []

    for npc in npc_list:
        result = await db.execute(
            select(DailyQuest).where(
                DailyQuest.user_id == user.id,
                DailyQuest.npc_id == npc["id"],
                DailyQuest.created_at > now - timedelta(hours=24)
            )
        )
        if result.scalar():
            continue

        category = random.choice(npc["categories"])
        rarity = random.choices(list(npc["rarity_pool"].keys()), weights=npc["rarity_pool"].values())[0]
        item = pick_random_item_from_store(category, rarity)
        if not item:
            continue

        item_payload = {
            "item_id": item["id"],
            "category": item.get("product_type", category),  # –µ—Å–ª–∏ –µ—Å—Ç—å product_type
            "rarity": item["rarity"],
            "name": item["name"],
            "icon": item["icon"]
        }

        quest = DailyQuest(
            user_id=user.id,
            npc_id=npc["id"],
            item_requested=item_payload,
            created_at=now,
            expires_at=now + timedelta(minutes=30),
            completed=False,
            failed=False
        )

        db.add(quest)
        new_quests.append(quest)

    await db.commit()
    return {"new_quests": [q.item_requested for q in new_quests]}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  POST /npc-quests/accept?npc_id=...
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.post("/accept", summary="–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç —É NPC")
async def accept_npc_quest(npc_id: str = Query(...),
                           user=Depends(get_current_user_from_cookie),
                           db: AsyncSession = Depends(get_db)):
    now = datetime.utcnow()

    result = await db.execute(
        select(DailyQuest).where(
            DailyQuest.user_id == user.id,
            DailyQuest.npc_id == npc_id,
            DailyQuest.created_at > now - timedelta(hours=24)
        )
    )
    today_quests = result.scalars().all()

    with open("data/npcs.json", "r", encoding="utf-8") as f:
        npcs = {n["id"]: n for n in json.load(f)}

    npc = npcs.get(npc_id)
    if not npc:
        raise HTTPException(404, detail="–¢–∞–∫–æ–π NPC –Ω–µ –Ω–∞–π–¥–µ–Ω")

    limit = npc.get("limit_per_day", 5)
    if len(today_quests) >= limit:
        raise HTTPException(400, detail="–õ–∏–º–∏—Ç –∫–≤–µ—Å—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")

    category = random.choice(npc["categories"])
    rarity = random.choices(list(npc["rarity_pool"].keys()), weights=npc["rarity_pool"].values())[0]
    MAX_ATTEMPTS = 10
    item = None

    for _ in range(MAX_ATTEMPTS):
        item = pick_random_item_from_store(category, rarity)
        if item:
            break

    if not item:
        raise HTTPException(400, detail="NPC –∑–∞–≤–∏—Å –≤ —Ä–∞–∑–¥—É–º—å—è—Ö, –Ω–µ –Ω–∞—à—ë–ª –ø—Ä–µ–¥–º–µ—Ç")


    expires_at = now + timedelta(minutes=30)

    quest = DailyQuest(
        user_id=user.id,
        npc_id=npc_id,
        item_requested={"item_id": item["id"], "category": category, "rarity": rarity},
        created_at=now,
        expires_at=expires_at,
        completed=False,
        failed=False
    )
    db.add(quest)
    await db.commit()

    return {
        "message": "–ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç",
        "expires_at": expires_at.isoformat(),
        "item": item
    }


class TurnInPayload(BaseModel):
    quest_id: int

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  POST /npc-quests/turn-in ‚Äî —Å–¥–∞—Ç—å –∫–≤–µ—Å—Ç
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.post("/turn-in", summary="–°–¥–∞—Ç—å –∫–≤–µ—Å—Ç NPC")
async def turn_in_quest(payload: TurnInPayload,
                        user=Depends(get_current_user_from_cookie),
                        db: AsyncSession = Depends(get_db)):
    quest = await db.get(DailyQuest, payload.quest_id)
    if not quest or quest.user_id != user.id:
        raise HTTPException(404, detail="–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if quest.completed or quest.failed:
        raise HTTPException(400, detail="–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")

    now = datetime.utcnow()
    if now > quest.expires_at:
        quest.failed = True
        await db.commit()
        return {"status": "fail", "message": "–í—Ä–µ–º—è –≤—ã—à–ª–æ, –∫–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω"}

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    item_id = quest.item_requested["item_id"]
    inv_q = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == user.id,
            InventoryItem.product_id == item_id
        )
    )
    inv_item = inv_q.scalar()
    if not inv_item:
        raise HTTPException(400, detail="–£ —Ç–µ–±—è –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")

    # ‚ùå –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
    await db.delete(inv_item)
    quest.completed = True

    # üì¶ –ù–∞–≥—Ä–∞–¥–∞
    with open("data/npcs.json", "r", encoding="utf-8") as f:
        npc_data = {n["id"]: n for n in json.load(f)}
    npc = npc_data.get(quest.npc_id, {})

    reward = npc.get("reward_on_success", {})
    xp = random.randint(reward.get("xp", {}).get("min", 0), reward.get("xp", {}).get("max", 0))
    coins = random.randint(reward.get("coins", {}).get("min", 0), reward.get("coins", {}).get("max", 0))

    await user.add_xp(db, xp)
    user.coins += coins

    db.add(user)  # üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û, –∏–Ω–∞—á–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # üéÅ –®–∞–Ω—Å special-–ø–æ–¥–∞—Ä–∫–æ–≤
    extra = {}

    for key, chance in reward.items():
        if key.startswith("special_") and isinstance(chance, (float, int)) and chance > 0:
            category = key.replace("special_", "").replace("_chance", "")
            if random.random() < chance:
                special = pick_random_item_from_store(category, "special")
                if special:
                    db.add(InventoryItem(
                        user_id=user.id,
                        product_id=special["id"]
                    ))
                    extra[category] = {
                        "id": special["id"],
                        "name": special["name"],
                        "icon": special["icon"]
                    }

    await db.commit()
    return {
        "status": "ok",
        "xp": xp,
        "coins": coins,
        "extra": extra
    }




# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  GET /npc-quests/list ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö NPC
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.get("/list", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NPC-–∫–≤–µ—Å—Ç–æ–¥–∞—Ç–µ–ª–µ–π")
async def get_npc_list():
    with open("data/npcs.json", "r", encoding="utf-8") as f:
        npc_list = json.load(f)
    return npc_list  # ‚ùóÔ∏è–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å JSON, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  GET /npc-quests/my ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  GET /npc-quests/my ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–≤–µ—Å—Ç—ã –∏–≥—Ä–æ–∫–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.get("/my", summary="–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
async def get_my_active_quests(user=Depends(get_current_user_from_cookie),
                               db: AsyncSession = Depends(get_db)):
    now = datetime.utcnow()

    result = await db.execute(
        select(DailyQuest).where(
            DailyQuest.user_id == user.id,
            DailyQuest.created_at > now - timedelta(hours=24)
        )
    )
    quests = result.scalars().all()

    # üß® –§–µ–π–ª–∏–º –∏—Å—Ç—ë–∫—à–∏–µ
    updated = False
    for quest in quests:
        if not quest.completed and not quest.failed and quest.expires_at < now:
            quest.failed = True
            updated = True

    if updated:
        await db.commit()

    with open("data/products.json", "r", encoding="utf-8") as f:
        products = {p["id"]: p for p in json.load(f)}

    return [
        {
            "id": q.id,
            "npc_id": q.npc_id,
            "item": {
                **q.item_requested,
                **(products.get(q.item_requested["item_id"], {}))  # üî• –¥–æ–±–∞–≤–ª—è–µ–º name –∏ icon
            },
            "completed": q.completed,
            "failed": q.failed,
            "expires_at": q.expires_at.isoformat()
        }
        for q in quests
    ]




