from fastapi import APIRouter, Depends, Request, HTTPException
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from models.models import Product, InventoryItem, User
from auth.cookie_auth import get_current_user_from_cookie
from database import get_db
from redis.asyncio import Redis
from decimal import Decimal, ROUND_DOWN
import json
from socket_config import sio

router = APIRouter(prefix="/api/donateshop", tags=["donateshop"])
redis = Redis.from_url("redis://localhost", decode_responses=True)


@router.get("/")
async def get_donate_shop(user: User = Depends(get_current_user_from_cookie)):
    """–û—Ç–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∑–∞ –Ω—É–ª–ª–∏–Ω–≥–∏)"""
    raw = await redis.get("donate_shop")
    if not raw:
        raise HTTPException(status_code=500, detail="üß® –î–æ–Ω–∞—Ç-—à–æ–ø –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

    data = json.loads(raw)
    return {"products": data}


@router.post("/buy/{product_id}")
async def buy_donate_product(
    product_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    result = await db.execute(
        select(Product).where(
            Product.id == product_id,
            Product.is_nulling_only == True
        ).with_for_update()
    )
    product = result.scalar()

    if not user or not product:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥–æ–Ω–∞—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ (–µ—Å–ª–∏ None ‚Äî –∑–Ω–∞—á–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π)
    is_limited_stock = product.stock is not None
    if is_limited_stock and product.stock <= 0:
        raise HTTPException(status_code=400, detail="‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    user_nullings = Decimal(user.nullings).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
    price = Decimal(product.nulling_price).quantize(Decimal("0.01"), rounding=ROUND_DOWN)

    if user_nullings < price:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–ª–ª–∏–Ω–≥–æ–≤!")

    user.nullings = (user_nullings - price).quantize(Decimal("0.01"), rounding=ROUND_DOWN)

    if is_limited_stock:
        product.stock -= 1

    await user.add_xp(db, 200)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    result = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == user.id,
            InventoryItem.product_id == product.id
        )
    )
    inventory_item = result.scalar()
    if inventory_item:
        inventory_item.quantity += 1
    else:
        db.add(InventoryItem(user_id=user.id, product_id=product.id, quantity=1))

    db.add(user)
    if is_limited_stock:
        db.add(product)

    await db.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º Redis –∏ –ø—É—à–∏–º —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    raw = await redis.get("donate_shop")
    if raw:
        data = json.loads(raw)
        for p in data:
            if p["id"] == product.id and is_limited_stock:
                p["stock"] = product.stock
                break
        await redis.set("donate_shop", json.dumps(data))
        await sio.emit("donate_shop_update", {"products": data}, namespace="/shop")

    return {"message": "üñ§ –ü–æ–∫—É–ø–∫–∞ –∑–∞ –Ω—É–ª–ª–∏–Ω–≥–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"}

