import random
import asyncio
import json
from socket_config import sio
from fastapi import APIRouter, Depends, HTTPException, Query, Request
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import Product, InventoryItem, ProductRarity, User
from redis.asyncio import Redis as AsyncRedis
from auth.cookie_auth import get_current_user_from_cookie

router = APIRouter()

redis = AsyncRedis.from_url("redis://localhost", decode_responses=True)

# üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
async def load_products_from_json():
    with open("data/products.json", encoding="utf-8") as file:
        return json.load(file)


# üî• –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
async def get_random_products(db: AsyncSession):
    result = await db.execute(
        select(Product).where(
    Product.stock > 0,
    ~Product.rarity.in_([ProductRarity.special, ProductRarity.prize, ProductRarity.unique, ProductRarity.vanished, ProductRarity.glitched, ProductRarity.void ])
)
    )
    products = result.scalars().all()

    if not products:
        print("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞!")
        return []

    rarity_weights = {
    ProductRarity.trash: (100, (2, 6), (5, 9)),
    ProductRarity.common: (85, (3, 5), (4, 7)),
    ProductRarity.rare: (30, (1, 2), (2, 3)),
    ProductRarity.epic: (7, (1, 1), (1, 2)),
    ProductRarity.legendary: (4, (1, 1), (1, 1)),
    ProductRarity.elder: (1, (1, 1), (1, 1)),
    }

    grouped_products = {rarity: [] for rarity in rarity_weights.keys()}
    for product in products:
        if product.rarity in grouped_products:
            grouped_products[product.rarity].append(product)

    selected_products = []
    for rarity, (chance, count_range, stock_range) in rarity_weights.items():
        if random.randint(1, 100) <= chance:
            available_items = grouped_products[rarity]
            if available_items:
                num_items = random.randint(count_range[0], min(count_range[1], len(available_items)))
                selected = random.sample(available_items, num_items)

                for item in selected:
                    random_stock = random.randint(stock_range[0], stock_range[1])
                    selected_products.append({
                        "id": item.id,
                        "name": item.name,
                        "price": item.price,
                        "rarity": item.rarity.value,
                        "image": item.image,
                        "description": item.description,
                        "stock": random_stock,
                        "product_type": item.product_type.value,
                    })

    print(f"üõí –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: {[p['name'] + ' (' + str(p['stock']) + ' —à—Ç.)' for p in selected_products]}")
    return selected_products

# üî• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def background_shop_updater():
    while True:
        await asyncio.sleep(20)
        new_products = await get_random_products()
        await redis.set("global_shop", json.dumps(new_products))
        print("üõí –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Redis!")

@router.get("/")
async def get_shop(
    request: Request,
    category: str = Query(None),
    user: User = Depends(get_current_user_from_cookie)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ Redis —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    shop_data_raw = await redis.get("global_shop")
    if not shop_data_raw:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ Redis")

    products_data = json.loads(shop_data_raw)

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    mapping = {
    # –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    "–µ–¥–∞": ["–µ–¥–∞"],
    "–Ω–∞–ø–∏—Ç–æ–∫": ["–Ω–∞–ø–∏—Ç–æ–∫"],
    "—Å–ª–∞–¥–æ—Å—Ç—å": ["—Å–ª–∞–¥–æ—Å—Ç—å"],
    "–∫–Ω–∏–≥–∞": ["–∫–Ω–∏–≥–∞"],
    "–Ω–∞–∫–ª–µ–π–∫–∞": ["–Ω–∞–∫–ª–µ–π–∫–∞"],
    "–∏–≥—Ä—É—à–∫–∞": ["–∏–≥—Ä—É—à–∫–∞"],
    "–∞–ø—Ç–µ–∫–∞": ["–∞–ø—Ç–µ–∫–∞"],
    "–≥–∞–¥–∂–µ—Ç": ["–≥–∞–¥–∂–µ—Ç"],
    "—Ç—É–∞–ª–µ—Ç": ["—Ç—É–∞–ª–µ—Ç"],
    "—Å—É–≤–µ–Ω–∏—Ä": ["—Å—É–≤–µ–Ω–∏—Ä"],
    "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],

    # —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
    "toy": ["–∏–≥—Ä—É—à–∫–∞"],
    "tech": ["–≥–∞–¥–∂–µ—Ç"],
    "toilet": ["—Ç—É–∞–ª–µ—Ç"],
    "—Å–ª–∏–≤": ["—Ç—É–∞–ª–µ—Ç"],
    "drugs": ["–∞–ø—Ç–µ–∫–∞"],
    "drug": ["–∞–ø—Ç–µ–∫–∞"],
    "books": ["–∫–Ω–∏–≥–∞"],
    "book": ["–∫–Ω–∏–≥–∞"],
    "–∫–Ω–∏–∂–Ω–∏–∫": ["–∫–Ω–∏–≥–∞"],
    "food": ["–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–ª–∞–¥–æ—Å—Ç—å"],

    # –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π": ["–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–ª–∞–¥–æ—Å—Ç—å"],
    "—Ç–µ—Ö–Ω–æ–ª–∞–π—Ç": ["–≥–∞–¥–∂–µ—Ç"],
    "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],
    "collectioner": ["–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–≤–µ–Ω–∏—Ä", "–∏–≥—Ä—É—à–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∞"],
}

    if category:
        allowed_types = mapping.get(category.lower())
        if allowed_types is None:
            return JSONResponse(
                content={"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"},
                status_code=400
            )
        filtered_products = [
            p for p in products_data if p.get("product_type", "").lower() in allowed_types
        ]
    else:
        filtered_products = products_data

    return {"products": filtered_products}  # üõ†Ô∏è –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–õ–û



# üî• –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
@router.post("/buy/{product_id}")
async def buy_product(
    request: Request,
    product_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(get_current_user_from_cookie)
):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä"""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    result = await db.execute(
        select(Product).where(Product.id == product_id).with_for_update()
    )
    product = result.scalar()

    if not user or not product:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    if user.coins < product.price:
        raise HTTPException(status_code=400, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!")

    if product.stock <= 0:
        raise HTTPException(status_code=400, detail="–¢–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")

    # –û–ø–ª–∞—Ç–∞ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    user.coins -= product.price
    product.stock -= 1
    await user.add_xp(db, 200)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    result = await db.execute(
        select(InventoryItem).where(
            InventoryItem.user_id == user.id,
            InventoryItem.product_id == product.id
        )
    )
    inventory_item = result.scalar()
    if inventory_item:
        inventory_item.quantity += 1
    else:
        new_item = InventoryItem(user_id=user.id, product_id=product.id, quantity=1)
        db.add(new_item)

    # üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    
    db.add(user)
    db.add(product)

    await db.commit()

    # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º Redis-–¥–∞–Ω–Ω—ã–µ –∏ —ç–º–∏—Ç–∏–º —Å–æ–∫–µ—Ç
    shop_data_raw = await redis.get("global_shop")
    if shop_data_raw:
        shop_data = json.loads(shop_data_raw)

    # –ù–∞–π–¥–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –æ–±–Ω–æ–≤–∏ –µ–≥–æ —Å—Ç–æ–∫
        for item in shop_data:
            if item["id"] == product.id:
                item["stock"] = product.stock
                break

        await redis.set("global_shop", json.dumps(shop_data))
        await sio.emit("shop_update", {"products": shop_data}, namespace="/shop")
        return {"message": f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π {product.name}!"}



