import random
import asyncio
import json
from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database import get_db
from models.models import Product, InventoryItem, ProductRarity, User
from redis.asyncio import Redis
from fastapi_jwt import JwtAuthorizationCredentials, JwtAccessBearer

router = APIRouter()

# JWT –º–µ–Ω–µ–¥–∂–µ—Ä
jwt_access = JwtAccessBearer(secret_key="supersecretkey")

redis = Redis.from_url("redis://localhost", decode_responses=True)

# üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
async def load_products_from_json():
    with open("data/products.json", encoding="utf-8") as file:
        return json.load(file)

# üî• –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
async def get_random_products():
    async with AsyncSession() as session:
        result = await session.execute(
            select(Product).where(Product.stock > 0, Product.rarity != ProductRarity.special)
        )
        products = result.scalars().all()

    if not products:
        print("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞!")
        return []

    rarity_weights = {
    ProductRarity.trash: (100, (2, 6), (5, 9)),
    ProductRarity.common: (85, (3, 5), (4, 7)),
    ProductRarity.rare: (30, (1, 2), (2, 3)),
    ProductRarity.epic: (10, (1, 1), (1, 2)),
    ProductRarity.legendary: (3, (1, 1), (1, 1)),
    ProductRarity.elder: (1, (1, 1), (1, 1)),
    }

    grouped_products = {rarity: [] for rarity in rarity_weights.keys()}
    for product in products:
        if product.rarity in grouped_products:
            grouped_products[product.rarity].append(product)

    selected_products = []
    for rarity, (chance, count_range, stock_range) in rarity_weights.items():
        if random.randint(1, 100) <= chance:
            available_items = grouped_products[rarity]
            if available_items:
                num_items = random.randint(count_range[0], min(count_range[1], len(available_items)))
                selected = random.sample(available_items, num_items)

                for item in selected:
                    random_stock = random.randint(stock_range[0], stock_range[1])
                    selected_products.append({
                        "id": item.id,
                        "name": item.name,
                        "price": item.price,
                        "rarity": item.rarity.value,
                        "image": item.image,
                        "description": item.description,
                        "stock": random_stock,
                        "product_type": item.product_type.value,
                    })

    print(f"üõí –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: {[p['name'] + ' (' + str(p['stock']) + ' —à—Ç.)' for p in selected_products]}")
    return selected_products

# üî• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def background_shop_updater():
    while True:
        await asyncio.sleep(20)
        new_products = await get_random_products()
        await redis.set("global_shop", json.dumps(new_products))
        print("üõí –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Redis!")

# üî• –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
@router.get("/")
async def get_shop(
    credentials: JwtAuthorizationCredentials = Depends(jwt_access),
    category: str = Query(None)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ Redis —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    shop_data = await redis.get("global_shop")
    if not shop_data:
        return JSONResponse(content={"error": "–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç!"}, status_code=400)

    products_data = json.loads(shop_data)

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    mapping = {
        "food": ["–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–ª–∞–¥–æ—Å—Ç–∏"],
    }

    if category:
        allowed_types = mapping.get(category.lower(), [category.lower()])
        filtered_products = [
            p for p in products_data if p.get("product_type", "").lower() in allowed_types
        ]
    else:
        filtered_products = products_data

    return {"products": filtered_products}

# üî• –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
@router.post("/buy/{product_id}")
async def buy_product(
    product_id: int,
    credentials: JwtAuthorizationCredentials = Depends(jwt_access),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    user_id = credentials.subject["user_id"]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar()
    result = await db.execute(select(Product).where(Product.id == product_id))
    product = result.scalar()

    if not user or not product:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    if user.coins < product.price:
        raise HTTPException(status_code=400, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!")
    
    if product.stock <= 0:
        raise HTTPException(status_code=400, detail="–¢–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")

    # –û–ø–ª–∞—Ç–∞ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    user.coins -= product.price
    user.add_xp(200)
    product.stock -= 1

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    result = await db.execute(
        select(InventoryItem).where(InventoryItem.user_id == user.id, InventoryItem.product_id == product.id)
    )
    inventory_item = result.scalar()
    if inventory_item:
        inventory_item.quantity += 1
    else:
        new_item = InventoryItem(user_id=user.id, product_id=product.id, quantity=1)
        db.add(new_item)

    await db.commit()
    return {"success": f"–í—ã –∫—É–ø–∏–ª–∏ {product.name}!"}
