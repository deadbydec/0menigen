import json
from collections import Counter
from pathlib import Path

PATH = Path("pet_species.json")

def load_species():
    with open(PATH, encoding="utf-8") as f:
        return json.load(f)

def check_species(data):
    seen_codes = []
    errors = []

    for i, entry in enumerate(data):
        for code, spec in entry.items():
            location = f"[entry {i}]"

            # 1. code –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
            if not code or not isinstance(code, str) or code.strip() == "":
                errors.append(f"{location} ‚õî –ü—É—Å—Ç–æ–π species_code: {repr(code)}")
                continue

            seen_codes.append(code)

            # 2. race_code –∏–ª–∏ race_mix –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
            if not spec.get("race_code") and not spec.get("race_mix"):
                errors.append(f"{location} {code} ‚Äî –Ω–µ—Ç race_code –∏ race_mix")

            # 3. –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–ª—é—á–∏
            for key in ["image", "trait_pool", "default_traits", "spawn_rules"]:
                if key not in spec:
                    errors.append(f"{location} {code} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key}")

            # 4. spawn_rules.weight
            weight = spec.get("spawn_rules", {}).get("weight")
            if weight is None:
                errors.append(f"{location} {code} ‚Äî –Ω–µ—Ç spawn_rules.weight")

    # 5. –¥—É–±–ª–∏–∫–∞—Ç—ã
    counter = Counter(seen_codes)
    for code, count in counter.items():
        if count > 1:
            errors.append(f"‚õî –î—É–±–ª–∏–∫–∞—Ç species_code: {code} √ó {count}")

    return errors

if __name__ == "__main__":
    try:
        data = load_species()
        problems = check_species(data)

        if problems:
            print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for prob in problems:
                print(" -", prob)
        else:
            print("‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–∏—Ç–æ–º—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ.")
    except Exception as e:
        print("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
        print(e)