import importlib
import pkgutil
from models import Base # ‚úÖ –î–æ–ª–∂–µ–Ω –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è `models.py`
import models
import asyncio
from logging.config import fileConfig
from sqlalchemy.ext.asyncio import AsyncEngine, create_async_engine
from alembic import context
from database import Base, DATABASE_URL  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –∏ URL –∏–∑ database.py
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.pool import NullPool
from config import settings

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ alembic.ini
config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º MetaData –∏–∑ –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã Alembic –ø–æ–Ω–∏–º–∞–ª, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
target_metadata = Base.metadata
print(f"üìå Alembic –≤–∏–¥–∏—Ç —ç—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã: {Base.metadata.tables.keys()}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã Alembic –∏—Ö –≤–∏–¥–µ–ª
def import_all_models():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ models/"""
    for _, module_name, _ in pkgutil.iter_modules(models.__path__):  # –¢–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∏
        importlib.import_module(f"models.{module_name}")

import_all_models()


# –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è PostgreSQL —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
def get_engine() -> AsyncEngine:
    return create_async_engine(
        settings.SQLALCHEMY_DATABASE_URI,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DSN –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä "postgresql+asyncpg://..."
        echo=True,
        pool_pre_ping=True,
        poolclass=NullPool,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        future=True
    )

# –û–§–§–õ–ê–ô–ù-—Ä–µ–∂–∏–º (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º Alembic –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î)
def run_migrations_offline():
    context.configure(
        url=DATABASE_URL,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()


# –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–Ω—É—Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def do_run_migrations(connection):
    context.configure(connection=connection, target_metadata=target_metadata)
    with context.begin_transaction():
        context.run_migrations()

# –û–ù–õ–ê–ô–ù-—Ä–µ–∂–∏–º (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã)
async def run_migrations_online():
    engine = get_engine()
    async with engine.connect() as connection:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await connection.run_sync(do_run_migrations)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    await engine.dispose()

if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online())

