from models.models import SystemMessageType
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from typing import Optional
from sqlalchemy import select, or_
from models.models import Friendship
from sqlalchemy.orm import joinedload


async def get_friends(user_id: int, db: AsyncSession) -> list[dict]:
    result = await db.execute(
        select(Friendship)
        .options(joinedload(Friendship.user), joinedload(Friendship.friend))
        .where(
            or_(
                Friendship.user_id == user_id,
                Friendship.friend_id == user_id
            )
        )
    )

    friendships = result.scalars().all()

    return [
        {
            "id": f.friend.id if f.user_id == user_id else f.user.id,
            "username": f.friend.username if f.user_id == user_id else f.user.username,
            "avatar": f.friend.avatar if f.user_id == user_id else f.user.avatar
        }
        for f in friendships
        if (f.friend and f.user)  # üí• –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ .user –∏ .friend —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    ]

async def send_system_message(
    db: AsyncSession,
    recipient_id: int,
    message_type: SystemMessageType,
    title: str,
    content: str,
    related_id: Optional[int] = None,
    mark_unread: bool = True,
):
    
    from models.models import SystemMessage

    msg = SystemMessage(
        recipient_id=recipient_id,
        message_type=message_type,
        title=title,
        content=content,
        related_id=related_id,
        is_read=not mark_unread,
        timestamp=datetime.utcnow()
    )
    db.add(msg)
    # –í–ê–ñ–ù–û: –ù–ï –∫–æ–º–º–∏—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—à—å –∏–∑–Ω—É—Ç—Ä–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Å–µ—Å—Å–∏–∏
    # commit –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —É–∂–µ –≤ –º–µ—Ç–æ–¥–∞—Ö `add_friend` –∏ —Ç.–¥.

async def get_friends(user_id: int, db: AsyncSession):
    result = await db.execute(
        select(Friendship).where(
            Friendship.user_id == user_id,
            Friendship.status == "accepted"
        )
    )
    return result.scalars().all()


async def add_friend(user_id: int, friend_id: int, db: AsyncSession):
    new_friendship = Friendship(user_id=user_id, friend_id=friend_id, status="pending")
    db.add(new_friendship)

    await send_system_message(
        db=db,
        recipient_id=friend_id,
        message_type=SystemMessageType.FRIEND_REQUEST,
        title="üë• –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è",
        content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è.",
        related_id=user_id
    )


async def accept_friend_request(user_id: int, friend_id: int, db: AsyncSession):
    result = await db.execute(
        select(Friendship).where(
            Friendship.user_id == friend_id,
            Friendship.friend_id == user_id,
            Friendship.status == "pending"
        )
    )
    friendship = result.scalar_one_or_none()

    if friendship:
        friendship.status = "accepted"

        await send_system_message(
            db=db,
            recipient_id=friend_id,
            message_type=SystemMessageType.FRIEND_ACCEPTED,
            title="‚úÖ –î—Ä—É–∂–±–∞ –ø—Ä–∏–Ω—è—Ç–∞",
            content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è.",
            related_id=user_id
        )

        return {"message": "–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω!"}

    return {"error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!"}


async def remove_friend(user_id: int, friend_id: int, db: AsyncSession):
    try:
        result = await db.execute(
            select(Friendship).where(
                or_(
                    (Friendship.user_id == user_id) & (Friendship.friend_id == friend_id),
                    (Friendship.user_id == friend_id) & (Friendship.friend_id == user_id)
                )
            )
        )
        friendship = result.scalar_one_or_none()

        if friendship:
            try:
                await send_system_message(
                    db=db,
                    recipient_id=friend_id,
                    message_type=SystemMessageType.FRIEND_CANCELLED,
                    title="üíî –î—Ä—É–∂–±–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞",
                    content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ –¥—Ä—É–∑–µ–π.",
                    related_id=user_id
                )
            except Exception as sm_err:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ system message: {sm_err}")

            await db.delete(friendship)
            await db.commit()  # üî• –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

            print(f"[FRIEND_REMOVED] user {user_id} —É–¥–∞–ª–∏–ª –¥—Ä—É–≥–∞ {friend_id}")
            return {"message": "–î—Ä—É–≥ —É–¥–∞–ª—ë–Ω!"}

        return {"error": "–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"}
    
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –≤ remove_friend: {e}")
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞"}
