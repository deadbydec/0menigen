from __future__ import annotations

import json
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from fastapi import HTTPException

from utils.slot_utils import get_enum_slot
from models.models import (
    InventoryItem,
    Product,
    ProductType,
    UserPetWardrobeItem,
    WardrobeSlot,
)


async def detect_slot(product: Product) -> WardrobeSlot:
    SLOT_MAP = {
        "background": "—Ñ–æ–Ω", "aura": "–æ–∫—Ä—É–∂–µ–Ω–∏–µ", "companion": "—Å–ø—É—Ç–Ω–∏–∫",
        "body": "—Ç–µ–ª–æ", "paws": "–ª–∞–ø—ã", "wings": "–∫—Ä—ã–ª—å—è",
        "eyes": "–≥–ª–∞–∑–∞", "head": "–≥–æ–ª–æ–≤–∞", "tail": "—Ö–≤–æ—Å—Ç",
        "accessory": "–∞–∫—Å–µ—Å—Å—É–∞—Ä", "face": "–º–æ—Ä–¥–∞", "skin": "–ø–æ–∫—Ä–æ–≤", "foreground":"–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω"
    }

    try:
        custom = json.loads(product.custom) if isinstance(product.custom, str) else (product.custom or {})
    except json.JSONDecodeError:
        custom = {}

    raw = custom.get("slot")
    ru_slot = SLOT_MAP.get(raw, raw)
    try:
        return WardrobeSlot(ru_slot) if ru_slot else WardrobeSlot.accessory
    except ValueError:
        return WardrobeSlot.accessory


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def move_to_wardrobe(           # ‚Üê —Ç–æ–ª—å–∫–æ –û–î–ò–ù —ç–∫–∑–µ–º–ø–ª—è—Ä
    db:   AsyncSession,
    user,                             # current user (–º–æ–¥–µ–ª—å User)
    item_id: int                      # InventoryItem.id
) -> None:
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π `InventoryItem`
    ‚Üí —Å–æ–∑–¥–∞—ë—Ç –ù–û–í–£–Æ –∑–∞–ø–∏—Å—å `UserPetWardrobeItem`
    —Å `quantity = 1` –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º `wardrobe_id`.
    """

    # 1 ‚ñ∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    item: InventoryItem | None = (
        await db.execute(
            select(InventoryItem)
            .options(joinedload(InventoryItem.product))
            .where(InventoryItem.id == item_id)
        )
    ).scalar_one_or_none()

    if not item or item.user_id != user.id:
        raise HTTPException(403, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à")

    product = item.product
    if not product:
        raise HTTPException(500, "–£ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ Product")

    # 2 ‚ñ∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Å–º–µ—Ç–∏–∫–∞
    is_cosmetic = (
        product.product_type == ProductType.cosmetic or
        str(product.product_type) == "cosmetic"       # —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
    )
    if not is_cosmetic:
        raise HTTPException(400, "–≠—Ç–æ –Ω–µ –∫–æ—Å–º–µ—Ç–∏–∫–∞")

    slot: WardrobeSlot = await detect_slot(product)

    # 3 ‚ñ∏ —Å–æ–∑–¥–∞—ë–º –ù–û–í–£–Æ –∑–∞–ø–∏—Å—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ
    wardrobe_entry = UserPetWardrobeItem(
        user_id    = user.id,
        product_id = product.id,
        slot       = slot,
        quantity   = 1            # –≤—Å–µ–≥–¥–∞ 1 ‚Äî –∫–∞–∂–¥–∞—è –∫–æ–ø–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
    )
    db.add(wardrobe_entry)

    # 4 ‚ñ∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ñ–ª–µ—à–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π wardrobe_id
    await db.flush()              # ‚Üê –∫—Ä–∏—Ç–∏—á–Ω–æ, –∏–Ω–∞—á–µ SQLAlchemy
                                  #    –º–æ–∂–µ—Ç –∞–≥–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏

    # 5 ‚ñ∏ –≤—ã—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if item.quantity > 1:
        item.quantity -= 1
    else:
        await db.delete(item)

    # 6 ‚ñ∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.commit()

    print(
        f"[WARDROBE] +1 ¬´{product.name}¬ª "
        f"(slot={slot.value}, wardrobe_id={wardrobe_entry.id})"
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def move_from_wardrobe(
    db: AsyncSession, user, product_id: int, qty: int = 1
) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `qty` —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ ‚Üí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–æ—É—Ç–æ–º  POST /wardrobe/remove, –∫–æ—Ç–æ—Ä—ã–π —à–ª—ë—Ç product_id + quantity.
    """
    if qty < 1:
        raise HTTPException(400, "quantity ‚â• 1")

    entry: UserPetWardrobeItem | None = (
        await db.execute(
            select(UserPetWardrobeItem).where(
                UserPetWardrobeItem.user_id == user.id,
                UserPetWardrobeItem.product_id == product_id,
            )
        )
    ).scalar_one_or_none()

    if not entry or entry.quantity < qty:
        raise HTTPException(400, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ")

    # ‚Äî –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ‚Äî
    inv_item: InventoryItem | None = (
        await db.execute(
            select(InventoryItem).where(
                InventoryItem.user_id == user.id,
                InventoryItem.product_id == product_id,
            )
        )
    ).scalar_one_or_none()

    if inv_item:
        inv_item.quantity += qty
    else:
        db.add(
            InventoryItem(
                user_id=user.id,
                product_id=product_id,
                quantity=qty,
            )
        )

    # ‚Äî –≥–∞—Ä–¥–µ—Ä–æ–± ‚Äî
    entry.quantity -= qty
    if entry.quantity == 0:
        await db.delete(entry)

    await db.commit()
    print(f"[WARDROBE] {entry.product.name} ‚Üê {qty} —à—Ç. –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def serialize_wardrobe(
    db: AsyncSession,
    user_id: int
) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–∫–∞–∂–¥—É—é –∫–æ–ø–∏—é** –ø—Ä–µ–¥–º–µ—Ç–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º.
    –ü–æ–ª–µ `quantity` –æ—Å—Ç–∞—ë—Ç—Å—è (–≤—Å–µ–≥–¥–∞ 1), –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç.
    """

    rows = (
        await db.execute(
            select(UserPetWardrobeItem)
            .options(joinedload(UserPetWardrobeItem.product))
            .where(UserPetWardrobeItem.user_id == user_id)
            .order_by(UserPetWardrobeItem.id.asc())
        )
    ).scalars().all()

    RU_TO_EN = {
        "—Ñ–æ–Ω": "background", "–æ–∫—Ä—É–∂–µ–Ω–∏–µ": "aura",   "—Å–ø—É—Ç–Ω–∏–∫": "companion",
        "—Ç–µ–ª–æ": "body",      "–ª–∞–ø—ã": "paws",        "–∫—Ä—ã–ª—å—è": "wings",
        "–≥–ª–∞–∑–∞": "eyes",     "–≥–æ–ª–æ–≤–∞": "head",      "—Ö–≤–æ—Å—Ç": "tail",
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä": "accessory", "–º–æ—Ä–¥–∞": "face",  "–ø–æ–∫—Ä–æ–≤": "skin",
        "–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω":"foreground", "—ç—Å—Å–µ–Ω—Ü–∏—è":"dye"
    }

    out: list[dict] = []

    for wrd in rows:
        prod = wrd.product

        # safe-parse custom
        custom = prod.custom
        if isinstance(custom, str):
            try:
                custom = json.loads(custom)
            except json.JSONDecodeError:
                custom = {}

        item: dict = {
            "wardrobe_id": wrd.id,          # üëà —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∫–æ–ø–∏–∏
            "product_id":  prod.id,
            "slot":        wrd.slot.value,
            "quantity":    wrd.quantity,    # –≤—Å–µ–≥–¥–∞ 1, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
            "name":        prod.name,
            "image":       prod.image,
            "rarity":      prod.rarity.value,
            "custom":      custom or {},
        }

        # –µ—Å–ª–∏ custom –∏–º–µ–µ—Ç slot-specific –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∫–ª–∞–¥—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        en_slot = RU_TO_EN.get(wrd.slot.value)
        if en_slot:
            key = f"{en_slot}_image"
            if isinstance(custom, dict) and key in custom:
                item[key] = custom[key]

        out.append(item)

    return out

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def build_avatar_layers(pet, db: AsyncSession) -> list[dict]:
    """
    –°—Ç—Ä–æ–∏—Ç —Å–ª–æ–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –º–∏–Ω–∏-–∞–≤–∞—Ç–∞—Ä–∞ (pet.avatar_layers), –Ω–∞ –æ—Å–Ω–æ–≤–µ appearance.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤.
    """

    inventory_ids = [l["inventory_id"] for l in pet.appearance_layers]
    order = pet.slot_order or []

    result = await db.execute(
        select(InventoryItem)
        .options(joinedload(InventoryItem.product))
        .where(InventoryItem.id.in_(inventory_ids))
    )
    inventory_map = {item.id: item for item in result.scalars().all()}

    STATIC_URL = "https://localhost:5002/static/goods"  # ‚ùóÔ∏è–∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

    layers = []
    for iid in order:
        inv = inventory_map.get(iid)
        if not inv or not inv.product:
            continue

        prod = inv.product
        custom = prod.custom
        if isinstance(custom, str):
            try:
                custom = json.loads(custom)
            except json.JSONDecodeError:
                custom = {}

        layers.append({
            "src": f"{STATIC_URL}/{prod.image}",
            "z": custom.get("z", 0),
            "slot": custom.get("slot", "unknown")
        })

    return layers







