// axios.js
import axios from 'axios';

// üëá –î–û–ë–ê–í–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
function getCookie(name) {
  const matches = document.cookie.match(new RegExp(
    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true,
});


// ‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫, –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è—é—â–∏–π CSRF-—Ç–æ–∫–µ–Ω —á—ë—Ç–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
api.interceptors.request.use((config) => {
const csrfToken = getCookie('csrf_access_token'); // üî• –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
if (csrfToken) {
    config.headers["X-CSRF-TOKEN"] = csrfToken;
  }
  return config;
});

api.interceptors.response.use(
  response => response,
  error => {
    if (error.response && error.response.status === 419) {
      console.warn("‚è∞ –¢–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω–∫—É...");
      window.location.href = "/login"; // –∏–ª–∏ router.push()
    }
    return Promise.reject(error);
  }
);


export default api;


