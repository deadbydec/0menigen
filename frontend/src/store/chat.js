import { defineStore } from "pinia";
import { ref } from "vue";
import { io } from "socket.io-client";
import api from "@/utils/axios";

export const useChatStore = defineStore("chat", () => {
  const messages = ref([]);
  const onlineUsers = ref(0);
  // –ù–ï —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç:
  let socket = null;
  // –¢–æ–ª—å–∫–æ isConnected ‚Äî —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
  const isConnected = ref(false);
  let listenersAttached = false;

  function connectSocket() {
    if (!import.meta.env.VITE_WS_URL) {
      console.error("‚ùå [ERROR] VITE_WS_URL –Ω–µ –∑–∞–¥–∞–Ω! WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.");
      return;
    }
    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (socket && socket.connected) {
      console.log("üîÑ WebSocket —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.");
      return;
    }
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket...");
    socket = io(import.meta.env.VITE_WS_URL, {
      transports: ["websocket"],
      withCredentials: true,
    });

    socket.on("connect", () => {
      console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω!");
      isConnected.value = true;
      loadInitialMessages();
      updateOnlineUsers();
    });

    socket.on("disconnect", () => {
      console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω.");
      isConnected.value = false;
    });
  if (!listenersAttached) {
    socket.on("chat_message", (message) => {
      console.log("üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
      messages.value.push(message);
    });

    socket.on("online_users", (count) => {
      console.log("üë• –û–Ω–ª–∞–π–Ω:", count);
      onlineUsers.value = count;
    });
    listenersAttached = true;
  }

    setInterval(updateOnlineUsers, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  async function updateOnlineUsers() {
    try {
      const { data } = await api.get("/chat/online"); // –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–π URL —Å–æ–¥–µ—Ä–∂–∏—Ç /api, –ø—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å "/chat/online"
      if (data && data.online !== undefined) {
        onlineUsers.value = data.online;
      }
    } catch (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞:", error);
    }
  }

  async function loadInitialMessages() {
    try {
      const { data } = await api.get("/chat/messages");
      messages.value = data;
    } catch (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    }
  }

  function sendMessage(text) {
    if (!socket || !socket.connected) {
      console.warn("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
      return;
    }
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", { text });
    socket.emit("send_message", { text });
  }

  return {
    messages,
    onlineUsers,
    isConnected,
    loadInitialMessages,
    sendMessage,
    connectSocket,
  };
});

















