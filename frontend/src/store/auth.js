import { defineStore } from "pinia";
import { ref, computed } from "vue";
import api from "@/utils/axios";

export const useAuthStore = defineStore("auth", () => {
  const user = ref(null);
  const isAuthenticated = computed(() => !!user.value);
  const isFetching = ref(false);
  const authReady = ref(false);


  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registerUser = async (username, email, password, confirmPassword) => {
    try {
      // –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç confirm_password, –∞ –Ω–µ confirmPassword,
      // –Ω–æ –≤ Pydantic –º–æ–¥–µ–ª–∏ —Ç—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∞ alias. –ó–¥–µ—Å—å –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–µ–Ω–Ω–æ –∫–ª—é—á confirm_password.
      const response = await api.post("/auth/register", { 
        username, 
        email, 
        password, 
        confirm_password: confirmPassword 
      }, { headers: { "Content-Type": "application/json" } });
      console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", response.data);
      // –ú–æ–∂–Ω–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
      // await login(username, password);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.response?.data || error.message);
      throw error;
    }
  };
  
  async function login(username, password) {
    await api.post("/auth/login", { username, password });
    // –ü–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –ø—Ä–æ—Å–∏–º –±—ç–∫–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∫—Ç–æ –º—ã
    // üí§ –ñ–¥—ë–º, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫—É
  await new Promise((res) => setTimeout(res, 100)); 

    await fetchUser();
  }

  async function fetchUser() {
    if (isFetching.value) return;
    isFetching.value = true;
    try {
      const res = await api.get("/player/"); // üî• —Ä–∞–±–æ—á–∏–π, –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Ä–æ—É—Ç
      user.value = res.data.name || null;
    } catch {
      user.value = null;
    } finally {
      isFetching.value = false;
      authReady.value = true;
    }
  }
  


  async function logout() {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É–∫–∏ (withCredentials –≤–∞–∂–µ–Ω)
      await api.post("/auth/logout", null, { withCredentials: true });
      console.log("‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!");
    } catch (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error.response?.data || error.message);
    } finally {
      clearAuth();
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∫—É–∫–∏ —Ç–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏—Å—å, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
      setTimeout(() => {
        window.location.replace("/login");
      },
    );
    }
  }
  
  function clearAuth() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—É–∫–∏
    document.cookie.split(";").forEach((cookie) => {
      const name = cookie.split("=")[0].trim();
      document.cookie = `${name}=;expires=${new Date(0).toUTCString()};path=/;domain=localhost`;
    });
    localStorage.clear();
    sessionStorage.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Pinia
    const authStore = useAuthStore();
    authStore.user = null;
  }
  

  return { user, isAuthenticated, login, logout, fetchUser, isFetching, registerUser, authReady };
});










