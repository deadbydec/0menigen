// inventory.js
import { defineStore } from "pinia";
import { ref, onMounted, onUnmounted } from "vue";
import api from "@/utils/axios";
import { useToastStore } from '@/store/toast' // üëà –∏–º–ø–æ—Ä—Ç —Å—Ç–æ—Ä–æ–≤ –∫–∞–∫ –æ–±—ã—á–Ω–æ

export const useInventoryStore = defineStore("inventory", () => {
  const inventory = ref([]);
  const toastStore = useToastStore()
  const userRace = ref(""); // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const selectedItem = ref(null);
  const csrfToken = getCookie("csrf_access_token");

  function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –±–∞–∑—ã ‚Äî –∫–∞–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω
  const fetchInventory = async () => {
    try {
      const response = await api.get("/inventory/", {
        withCredentials: true,
        headers: { "Cache-Control": "no-cache", "Pragma": "no-cache" }
      });
      inventory.value = (response.data.inventory || []).filter(item => item.quantity > 0);
      userRace.value = response.data.user_race || ""; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", error);
      toastStore.addToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", { type: 'error' });
    }
  };

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: –≤—ã–∑—ã–≤–∞–µ–º API, –∑–∞—Ç–µ–º fetchInventory() –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
  const useItem = async () => {
    if (!selectedItem.value) {
      toast.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!");
      return;
    }
    try {
      const response = await api.post(
        `/inventory/use/${selectedItem.value.id}`,
        null,
        {
          withCredentials: true,
          headers: { "X-CSRF-TOKEN": csrfToken }
        }
      );
      toastStore.addToast(response.data.message, { type: 'success' });
      await fetchInventory(); // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      selectedItem.value = null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      toastStore.addToast("–ë–ª—è—Ç—å. –Ø –Ω–µ –º–æ–≥—É —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!", { type: 'error' });
    }
  };

  // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: —Ç–æ –∂–µ —Å–∞–º–æ–µ ‚Äî API –∏ –∑–∞—Ç–µ–º fetchInventory()
  const destroyItem = async () => {
    if (!selectedItem.value) {
      toast.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º!");
      return;
    }
    try {
      const response = await api.delete(
        `/inventory/discard/${selectedItem.value.id}`,
        {
          withCredentials: true,
          headers: { "X-CSRF-TOKEN": csrfToken }
        }
      );
      toastStore.addToast(response.data.message, { type: 'success' });
      selectedItem.value = null;
      await fetchInventory();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±—Ä–∞—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞!");
    }
  };

  const recycleItem = async () => {
    if (!selectedItem.value) return alert("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏!");
    try {
      const response = await api.post(
        `/inventory/recycle/${selectedItem.value.id}`,
        null,
        {
          withCredentials: true,
          headers: { "X-CSRF-TOKEN": csrfToken }
        }
      );
      toastStore.addToast(response.data.message, { type: 'success' });
      await fetchInventory();
      selectedItem.value = null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:", error);
      toastStore.addToast("–°—É–∫–∞! –Ø –Ω–µ –º–æ–≥—É —ç—Ç–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å!", { type: 'error' });
    }
  };

  const sendToVault = async (itemId, quantity = 1) => {
    try {
      const payload = {
        item_id: itemId,
        quantity: quantity
      };
  
      const res = await api.post('/safe/vault/deposit-item', payload, {
        withCredentials: true,
        headers: { "X-CSRF-TOKEN": csrfToken }
      });
  
      toastStore.addToast(res.data.message, { type: 'success' });
      await fetchInventory();
      selectedItem.value = null;
      return res.data;
  
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ —Å–µ–π—Ñ:", error);
      const msg = error.response?.data?.detail || "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–µ–π—Ñ.";
      toastStore.addToast(msg, { type: 'error' });
      throw error;
    }
  };
  
  
  
  


  // –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
  const selectItem = (item) => {
    selectedItem.value = selectedItem.value?.id === item.id ? null : item;
  };

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å


  return {
    inventory,
    userRace,
    selectedItem,
    fetchInventory,
    useItem,
    recycleItem,
    sendToVault,
    destroyItem,
    selectItem
  };
});

