// stores/friends.js
import { defineStore } from "pinia"
import { ref } from "vue"
import api from "@/utils/axios"

export const useFriendsStore = defineStore("friends", () => {
  const friends = ref([])
  const requests = ref([])
  const activeTab = ref("friends")

  // üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
  async function fetchList() {
  try {
    const res = await api.get("/friends/list", { withCredentials: true })
    friends.value = res.data || []
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:", err)
  }
}


  // üîÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏
  async function fetchRequests() {
    try {
      const res = await api.get("/friends/requests", { withCredentials: true })
      requests.value = res.data || []
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:", err)
      requests.value = []
    }
  }

  // ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
  async function acceptRequest(requestId) {
    try {
      await api.post("/friends/accept", { request_id: requestId }, { withCredentials: true })
      await fetchList()
      await fetchRequests()
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏:", err)
    }
  }

  // ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
  async function rejectRequest(requestId) {
    try {
      await api.post("/friends/reject", { request_id: requestId }, { withCredentials: true })
      await fetchRequests()
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", err)
    }
  }

  // ‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è
  async function sendRequest(friendId) {
    try {
      await api.post("/friends/add", { friend_id: friendId }, { withCredentials: true })
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
    }
  }

  // ‚ùé –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
  async function removeFriend(friendId) {
    try {
      await api.post("/friends/remove", { friend_id: friendId }, { withCredentials: true })
      await fetchList()
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:", err)
    }
  }

  // üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  async function checkStatus(friendId) {
    try {
      const res = await api.get("/friends/status", {
        params: { friend_id: friendId },
        withCredentials: true,
      })
      return res.data.status // 'none' | 'pending' | 'accepted'
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", err)
      return "none"
    }
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∑–µ–π –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞
async function fetchPublicFriends(userId) {
  try {
    const res = await api.get(`/friends/public/${userId}`)
    friends.value = res.data || []
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥—Ä—É–∑–µ–π:", err)
    friends.value = []
  }
}

function resetFriends() {
  friends.value = []
  requests.value = []
}



  return {
    friends,
    resetFriends,
    requests,
    activeTab,
    fetchRequests,
    acceptRequest,
    rejectRequest,
    sendRequest,
    removeFriend,
    checkStatus,
    fetchList,
    fetchPublicFriends
  }
})

